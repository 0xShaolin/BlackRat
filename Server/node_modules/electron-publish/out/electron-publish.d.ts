declare module "electron-publish/out/progress" {
  
  /*!
   * node-progress
   * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
   * MIT Licensed
   */
  export abstract class ProgressBar {
    private readonly format
    private stream
    private current
    total: number
    private width
    private chars
    private tokens
    private lastDraw
    private start
    private complete
    /**
     * Initialize a `ProgressBar` with the given `fmt` string and `options` or`total`.
     *
     * Options:
     *   - `curr` current completed index
     *   - `total` total number of ticks to complete
     *   - `width` the displayed width of the progress bar defaulting to total
     *   - `stream` the output stream defaulting to stderr
     *   - `head` head character defaulting to complete character
     *   - `complete` completion character defaulting to "="
     *   - `incomplete` incomplete character defaulting to "-"
     *   - `renderThrottle` minimum time between updates in milliseconds defaulting to 16
     *   - `callback` optional function to call when the progress bar completes
     *   - `clear` will clear the progress bar upon termination
     *
     * Tokens:
     *   - `:bar` the progress bar itself
     *   - `:current` current tick number
     *   - `:total` total ticks
     *   - `:elapsed` time elapsed in seconds
     *   - `:percent` completion percentage
     *   - `:eta` eta in seconds
     *   - `:rate` rate of ticks per second
     */
    constructor(format: string, options?: any)
    /**
     * "tick" the progress bar with optional `len` and optional `tokens`.
     */
    tick(delta: number): void
    currentAmount: number
    render(): void
    /**
     * "update" the progress bar to represent an exact percentage.
     * The ratio (between 0 and 1) specified will be multiplied by `total` and
     * floored, representing the closest available "tick." For example, if a
     * progress bar has a length of 3 and `update(0.5)` is called, the progress
     * will be set to 1.
     *
     * A ratio of 0.5 will attempt to set the progress to halfway.
     */
    update(ratio: number): void
    /**
     * "interrupt" the progress bar and write a message above it.
     */
    interrupt(message: string): void
    abstract terminate(): void
  }

  export class ProgressCallback {
    private readonly progressBar
    private start
    private nextUpdate
    constructor(progressBar: ProgressBar)
    update(transferred: number, total: number): void
  }
}

declare module "electron-publish/out/multiProgress" {
  import { ProgressBar } from "electron-publish/out/progress"

  export class MultiProgress {
    private readonly stream
    private cursor
    private totalLines
    private isLogListenerAdded
    private barCount
    createBar(format: string, options: any): ProgressBar
    private allocateLines(count)
    private moveCursor(index)
    terminate(): void
  }
}

declare module "electron-publish" {
  /// <reference types="node" />
  import { CancellationToken } from "electron-builder-http"
  import { Stats } from "fs-extra-p"
  import { ClientRequest } from "http"
  import { MultiProgress } from "electron-publish/out/multiProgress"
  import { ProgressBar } from "electron-publish/out/progress"
  export type PublishPolicy = "onTag" | "onTagOrDraft" | "always" | "never"

  export interface PublishOptions {
    publish?: PublishPolicy | null
    draft?: boolean
    prerelease?: boolean
  }

  export interface PublishContext {
    readonly cancellationToken: CancellationToken
    readonly progress: MultiProgress | null
  }

  export abstract class Publisher {
    protected readonly context: PublishContext
    constructor(context: PublishContext)
    readonly abstract providerName: string
    abstract upload(file: string, safeArtifactName?: string): Promise<any>
    protected createProgressBar(fileName: string, fileStat: Stats): ProgressBar | null
    protected createReadStreamAndProgressBar(file: string, fileStat: Stats, progressBar: ProgressBar | null, reject: (error: Error) => void): NodeJS.ReadableStream
    abstract toString(): string
  }

  export abstract class HttpPublisher extends Publisher {
    protected readonly context: PublishContext
    private readonly useSafeArtifactName
    constructor(context: PublishContext, useSafeArtifactName?: boolean)
    upload(file: string, safeArtifactName?: string): Promise<any>
    uploadData(data: Buffer, fileName: string): Promise<any>
    protected abstract doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, file?: string): Promise<any>
  }
}

declare module "electron-publish/out/BintrayPublisher" {
  /// <reference types="node" />
  import { BintrayOptions } from "electron-builder-http/out/publishOptions"
  import { ClientRequest } from "http"
  import { HttpPublisher, PublishContext, PublishOptions } from "electron-publish"

  export class BintrayPublisher extends HttpPublisher {
    private readonly version
    private readonly options
    private _versionPromise
    private readonly client
    readonly providerName: string
    constructor(context: PublishContext, info: BintrayOptions, version: string, options?: PublishOptions)
    private init()
    protected doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any>
    deleteRelease(): Promise<any>
    toString(): string
  }
}

declare module "electron-publish/out/gitHubPublisher" {
  /// <reference types="node" />
  import { GithubOptions } from "electron-builder-http/out/publishOptions"
  import { ClientRequest } from "http"
  import { HttpPublisher, PublishContext, PublishOptions } from "electron-publish"

  export interface Release {
    id: number
    tag_name: string
    draft: boolean
    prerelease: boolean
    published_at: string
    upload_url: string
  }

  export class GitHubPublisher extends HttpPublisher {
    private readonly info
    private readonly version
    private readonly options
    private tag
    private _releasePromise
    private readonly token
    readonly providerName: string
    /** @private */
    readonly releasePromise: Promise<Release | null>
    constructor(context: PublishContext, info: GithubOptions, version: string, options?: PublishOptions)
    private getOrCreateRelease()
    protected doUpload(fileName: string, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<void>
    private createRelease()
    getRelease(): Promise<any>
    deleteRelease(): Promise<any>
    private githubRequest<T>(path, token, data?, method?)
    toString(): string
  }
}

