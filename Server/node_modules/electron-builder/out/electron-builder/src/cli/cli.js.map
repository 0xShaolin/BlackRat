{"version":3,"file":"cli.js","sourceRoot":"","sources":["../../../../src/cli/cli.ts"],"names":[],"mappings":"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","sourcesContent":["#! /usr/bin/env node\n\nimport { cyan, dim, green, reset, underline } from \"chalk\"\nimport { exec, log, warn } from \"electron-builder-util\"\nimport { printErrorAndExit } from \"electron-builder-util/out/promise\"\nimport { readJson } from \"fs-extra-p\"\nimport isCi from \"is-ci\"\nimport * as path from \"path\"\nimport updateNotifier from \"update-notifier\"\nimport yargs from \"yargs\"\nimport { build, configureBuildCommand } from \"../builder\"\nimport { getElectronVersion } from \"../util/config\"\nimport { getGypEnv } from \"../util/yarn\"\nimport { createSelfSignedCert } from \"./create-self-signed-cert\"\nimport { configureInstallAppDepsCommand, installAppDeps } from \"./install-app-deps\"\n\nyargs\n  .command(<any>[\"build\", \"*\"], \"Build\", configureBuildCommand, wrap(build))\n  .command(\"install-app-deps\", \"Install app deps\", configureInstallAppDepsCommand, wrap(installAppDeps))\n  .command(\"node-gyp-rebuild\", \"Rebuild own native code\", configureInstallAppDepsCommand /* yes, args the same as for install app deps */, wrap(rebuildAppNativeCode))\n  .command(\"create-self-signed-cert\", \"Create self-signed code signing cert for Windows apps\",\n    yargs => yargs\n      .option(\"publisher\", {\n        alias: [\"p\"],\n        type: \"string\",\n        requiresArg: true,\n        description: \"The publisher name\",\n      })\n      .demandOption(\"publisher\"),\n    wrap(argv => createSelfSignedCert(argv.publisher)))\n  .help()\n  .epilog(`See the Wiki (${underline(\"https://github.com/electron-userland/electron-builder/wiki\")}) for more documentation.`)\n  .strict()\n  .argv\n\nfunction wrap(task: (args: any) => Promise<any>) {\n  return (args: any) => {\n    checkIsOutdated()\n    task(args)\n      .catch(printErrorAndExit)\n  }\n}\n\nfunction checkIsOutdated() {\n  if (isCi || process.env.NO_UPDATE_NOTIFIER != null) {\n    return\n  }\n\n  readJson(path.join(__dirname, \"..\", \"..\", \"package.json\"))\n    .then(it => {\n      if (it.version === \"0.0.0-semantic-release\") {\n        return\n      }\n\n      const notifier = updateNotifier({pkg: it})\n      if (notifier.update != null) {\n        notifier.notify({\n          message: `Update available ${dim(notifier.update.current)}${reset(\" â†’ \")}${green(notifier.update.latest)} \\nRun ${cyan(\"yarn upgrade electron-builder\")} to update`\n        })\n      }\n    })\n    .catch(e => warn(`Cannot check updates: ${e}`))\n}\n\nasync function rebuildAppNativeCode(args: any) {\n  const projectDir = process.cwd()\n  log(`Execute node-gyp rebuild for ${args.platform}:${args.arch}`)\n  // this script must be used only for electron\n  await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n    env: getGypEnv({version: await getElectronVersion(projectDir), useCustomDist: true}, args.platform, args.arch, true),\n  })\n}"]}
