{"version":3,"file":"asarUtil.js","sourceRoot":"","sources":["../../../../src/util/asarUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { debug, log } from \"electron-builder-util\"\nimport { CONCURRENCY, FileCopier, Filter, MAX_FILE_REQUESTS, statOrNull, walk } from \"electron-builder-util/out/fs\"\nimport { createReadStream, createWriteStream, ensureDir, readFile, Stats, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AsarFilesystem, Node, readAsar } from \"../asar\"\nimport { createElectronCompilerHost } from \"../fileTransformer\"\nimport { AsarOptions } from \"../metadata\"\nimport { Packager } from \"../packager\"\nimport { PlatformPackager } from \"../platformPackager\"\nimport { AppFileCopierHelper, AppFileWalker } from \"./AppFileWalker\"\nimport { AsyncTaskManager } from \"./asyncTaskManager\"\n\nconst isBinaryFile: any = BluebirdPromise.promisify(require(\"isbinaryfile\"))\nconst pickle = require (\"chromium-pickle-js\")\n\nconst NODE_MODULES_PATTERN = `${path.sep}node_modules${path.sep}`\nconst BOWER_COMPONENTS_PATTERN = `${path.sep}bower_components${path.sep}`\n\n/** @internal */\nexport const ELECTRON_COMPILE_SHIM_FILENAME = \"__shim.js\"\n\nfunction addValue(map: Map<string, Array<string>>, key: string, value: string) {\n  let list = map.get(key)\n  if (list == null) {\n    list = [value]\n    map.set(key, list)\n  }\n  else {\n    list.push(value)\n  }\n}\n\nexport function copyFileOrData(fileCopier: FileCopier, data: string | Buffer | undefined | null, src: string, destination: string, stats: Stats) {\n  if (data == null) {\n    return fileCopier.copy(src, destination, stats)\n  }\n  else {\n    return writeFile(destination, data)\n  }\n}\n\n/** @internal */\nexport class AsarPackager {\n  private readonly fs = new AsarFilesystem(this.src)\n  private readonly outFile: string\n  \n  private transformedFiles: Array<string | Buffer | true | null>\n  private metadata: Map<string, Stats>\n\n  private electronCompileCache: string | null = null\n\n  constructor(private readonly src: string, destination: string, private readonly options: AsarOptions, private readonly unpackPattern: Filter | null) {\n    this.outFile = path.join(destination, \"app.asar\")\n  }\n\n  // sort files to minimize file change (i.e. asar file is not changed dramatically on small change)\n  async pack(isElectronCompile: boolean, packager: PlatformPackager<any>, fileWalker: AppFileWalker, fileCopierHelper: AppFileCopierHelper) {\n    let files: Array<string> = await fileCopierHelper.collect(fileWalker)\n    this.metadata = fileWalker.metadata\n    this.transformedFiles = fileCopierHelper.transformedFiles\n\n    // transform before electron-compile to avoid filtering (cache files in any case should be not transformed)\n    if (isElectronCompile) {\n      files = await this.compileUsingElectronCompile(files, packager)\n    }\n    \n    await this.createPackageFromFiles(this.options.ordering == null ? files : await this.order(files), packager.info)\n  }\n\n  async compileUsingElectronCompile(files: Array<string>, packager: PlatformPackager<any>): Promise<Array<string>> {\n    log(\"Compiling using electron-compile\")\n    \n    const metadata = this.metadata\n    this.electronCompileCache = await packager.getTempFile(\"electron-compile-cache\")\n    const cacheDir = path.join(this.electronCompileCache, \".cache\")\n    // clear and create cache dir\n    await ensureDir(cacheDir)\n    const compilerHost = await createElectronCompilerHost(this.src, cacheDir)\n    const nextSlashIndex = this.src.length + 1\n    // pre-compute electron-compile to cache dir - we need to process only subdirectories, not direct files of app dir\n    await BluebirdPromise.map(files, file => {\n      if (file.includes(NODE_MODULES_PATTERN) || file.includes(BOWER_COMPONENTS_PATTERN)\n        || !file.includes(path.sep, nextSlashIndex) // ignore not root files\n        || !metadata.get(file)!.isFile()) {\n        return null\n      }\n      return compilerHost.compile(file)\n        .then((it: any) => null)\n    }, CONCURRENCY)\n\n    await compilerHost.saveConfiguration()\n    \n    const cacheFiles = await walk(cacheDir, (file, stat) => !file.startsWith(\".\"), {\n      consume: (file, fileStat) => {\n        this.metadata.set(file, fileStat)\n        return null\n      }\n    })\n    \n    // add shim\n    const shimPath = `${this.src}/${ELECTRON_COMPILE_SHIM_FILENAME}`\n    cacheFiles.push(shimPath)\n    metadata.set(shimPath, <any>{isFile: () => true, isDirectory: () => false})\n    \n    this.transformedFiles = (new Array(cacheFiles.length)).concat(this.transformedFiles)\n    \n    this.transformedFiles[cacheFiles.length - 1] = `\n'use strict';\nrequire('electron-compile').init(__dirname, require('path').resolve(__dirname, '${packager.info.metadata.main || \"index\"}'), true);\n`\n    // cache files should be first (better IO)\n    return cacheFiles.concat(files)\n  }\n\n  async detectUnpackedDirs(files: Array<string>, autoUnpackDirs: Set<string>, unpackedDest: string) {\n    const dirToCreate = new Map<string, Array<string>>()\n    const metadata = this.metadata\n    /* tslint:disable:rule1 prefer-const */\n    for (let i = 0, n = files.length; i < n; i++) {\n      const file = files[i]\n      const index = file.lastIndexOf(NODE_MODULES_PATTERN)\n      if (index < 0) {\n        continue\n      }\n\n      let nextSlashIndex = file.indexOf(path.sep, index + NODE_MODULES_PATTERN.length + 1)\n      if (nextSlashIndex < 0) {\n        continue\n      }\n\n      if (file[index + NODE_MODULES_PATTERN.length] === \"@\") {\n        nextSlashIndex = file.indexOf(path.sep, nextSlashIndex + 1)\n      }\n\n      if (!metadata.get(file)!.isFile()) {\n        continue\n      }\n\n      const packageDir = file.substring(0, nextSlashIndex)\n      if (autoUnpackDirs.has(packageDir)) {\n        const fileParent = path.dirname(file)\n        if (fileParent !== packageDir && !autoUnpackDirs.has(fileParent)) {\n          autoUnpackDirs.add(fileParent)\n          addValue(dirToCreate, this.getRelativePath(packageDir), path.relative(packageDir, fileParent))\n        }\n        continue\n      }\n\n      const ext = path.extname(file)\n      let shouldUnpack = false\n      if (ext === \".dll\" || ext === \".exe\") {\n        shouldUnpack = true\n      }\n      else if (ext === \"\") {\n        shouldUnpack = await isBinaryFile(file)\n      }\n\n      if (!shouldUnpack) {\n        continue\n      }\n\n      debug(`${this.getRelativePath(packageDir)} is not packed into asar archive - contains executable code`)\n\n      let fileParent = path.dirname(file)\n\n      // create parent dir to be able to copy file later without directory existence check\n      addValue(dirToCreate, this.getRelativePath(packageDir), path.relative(packageDir, fileParent))\n\n      while (fileParent !== packageDir) {\n        autoUnpackDirs.add(fileParent)\n        fileParent = path.dirname(fileParent)\n      }\n      autoUnpackDirs.add(packageDir)\n    }\n    \n    if (dirToCreate.size > 0) {\n      // child directories should be not created asynchronously - parent directories should be created first\n      await BluebirdPromise.map(dirToCreate.keys(), async (it) => {\n        const base = path.join(unpackedDest, it)\n        await ensureDir(base)\n        await BluebirdPromise.each(dirToCreate.get(it)!, it => ensureDir(path.join(base, it)))\n      }, CONCURRENCY)\n    }\n  }\n\n  private getTargetPath(p: string, to: string) {\n    if (this.electronCompileCache != null && p.startsWith(this.electronCompileCache)) {\n      return this.electronCompileCache.replace(this.electronCompileCache, to)\n    }\n    return p.replace(this.src, to)\n  }\n\n  getRelativePath(p: string) {\n    if (this.electronCompileCache != null && p.startsWith(this.electronCompileCache)) {\n      return path.relative(this.electronCompileCache, p)\n    }\n    return path.relative(this.src, p)\n  }\n\n  private async createPackageFromFiles(files: Array<string>, packager: Packager) {\n    const metadata = this.metadata\n    // search auto unpacked dir\n    const unpackedDirs = new Set<string>()\n    const unpackedDest = `${this.outFile}.unpacked`\n    await ensureDir(path.dirname(this.outFile))\n\n    if (this.options.smartUnpack !== false) {\n      await this.detectUnpackedDirs(files, unpackedDirs, unpackedDest)\n    }\n\n    const dirToCreateForUnpackedFiles = new Set<string>(unpackedDirs)\n    \n    const transformedFiles = this.transformedFiles\n    const taskManager = new AsyncTaskManager(packager.cancellationToken)\n    const fileCopier = new FileCopier()\n    for (let i = 0, n = files.length; i < n; i++) {\n      const file = files[i]\n      const stat = metadata.get(file)\n      const relativePath = this.getRelativePath(file)\n      if (stat != null && stat.isFile()) {\n        const fileParent = path.dirname(file)\n        const dirNode = this.fs.getOrCreateNode(this.getRelativePath(fileParent))\n        \n        const newData = transformedFiles == null ? null : <string | Buffer>transformedFiles[i]\n        const node = this.fs.getOrCreateNode(relativePath)\n        node.size = newData == null ? stat.size : Buffer.byteLength(<any>newData)\n        if (dirNode.unpacked || (this.unpackPattern != null && this.unpackPattern(file, stat))) {\n          node.unpacked = true\n          if (newData != null) {\n            transformedFiles[i] = null\n          }\n\n          if (!dirNode.unpacked && !dirToCreateForUnpackedFiles.has(fileParent)) {\n            dirToCreateForUnpackedFiles.add(fileParent)\n            await ensureDir(this.getTargetPath(fileParent, unpackedDest))\n          }\n\n          const unpackedFile = this.getTargetPath(file, unpackedDest)\n          taskManager.addTask(copyFileOrData(fileCopier, newData, file, unpackedFile, stat))\n          if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n            await taskManager.awaitTasks()\n          }\n        }\n        else {\n          if (newData == null) {\n            transformedFiles[i] = true\n          }\n          \n          this.fs.insertFileNode(node, stat, file)\n        }\n      }\n      else if (stat == null || stat.isDirectory()) {\n        let unpacked = false\n        if (unpackedDirs.has(file)) {\n          unpacked = true\n        }\n        else {\n          for (const dir of unpackedDirs) {\n            if (file.length > (dir.length + 2) && file[dir.length] === path.sep && file.startsWith(dir)) {\n              unpacked = true\n              unpackedDirs.add(file)\n              // not all dirs marked as unpacked after first iteration - because node module dir can be marked as unpacked after processing node module dir content\n              // e.g. node-notifier/example/advanced.js processed, but only on process vendor/terminal-notifier.app module will be marked as unpacked\n              await ensureDir(this.getTargetPath(file, unpackedDest))\n              break\n            }\n          }\n        }\n        this.fs.insertDirectory(relativePath, unpacked)\n      }\n      else if (stat.isSymbolicLink()) {\n        this.fs.getOrCreateNode(relativePath).link = (<any>stat).relativeLink\n      }\n    }\n\n    if (taskManager.tasks.length > 0) {\n      await taskManager.awaitTasks()\n    }\n    \n    await this.writeAsarFile(files)\n  }\n\n  private writeAsarFile(files: Array<string>): Promise<any> {\n    const headerPickle = pickle.createEmpty()\n    headerPickle.writeString(JSON.stringify(this.fs.header))\n    const headerBuf = headerPickle.toBuffer()\n\n    const sizePickle = pickle.createEmpty()\n    sizePickle.writeUInt32(headerBuf.length)\n    const sizeBuf = sizePickle.toBuffer()\n\n    const transformedFiles = this.transformedFiles\n    const writeStream = createWriteStream(this.outFile)\n    return new BluebirdPromise((resolve, reject) => {\n      writeStream.on(\"error\", reject)\n      writeStream.on(\"close\", resolve)\n      writeStream.write(sizeBuf)\n\n      const w = (index: number) => {\n        let data\n        while (true) {\n          if (index >= files.length) {\n            writeStream.end()\n            return\n          }\n          \n          if ((data = transformedFiles[index++]) != null) {\n            break\n          }\n        }\n\n        const file = files[index - 1]\n        if (data !== true) {\n          writeStream.write(data, () => w(index))\n          return\n        }\n\n        const readStream = createReadStream(file)\n        readStream.on(\"error\", reject)\n        readStream.once(\"end\", () => w(index))\n        readStream.pipe(writeStream, {\n          end: false\n        })\n      }\n\n      writeStream.write(headerBuf, () => w(0))\n    })\n  }\n\n  private async order(filenames: Array<string>) {\n    const orderingFiles = (await readFile(this.options.ordering!, \"utf8\")).split(\"\\n\").map(line => {\n      if (line.indexOf(\":\") !== -1) {\n        line = line.split(\":\").pop()!\n      }\n      line = line.trim()\n      if (line[0] === \"/\") {\n        line = line.slice(1)\n      }\n      return line\n    })\n\n    const ordering: Array<string> = []\n    for (const file of orderingFiles) {\n      const pathComponents = file.split(path.sep)\n      for (const pathComponent of pathComponents) {\n        ordering.push(path.join(this.src, pathComponent))\n      }\n    }\n\n    const sortedFiles: Array<string> = []\n    let missing = 0\n    const total = filenames.length\n    for (const file of ordering) {\n      if (!sortedFiles.includes(file) && filenames.includes(file)) {\n        sortedFiles.push(file)\n      }\n    }\n    for (const file of filenames) {\n      if (!sortedFiles.includes(file)) {\n        sortedFiles.push(file)\n        missing += 1\n      }\n    }\n    log(`Ordering file has ${((total - missing) / total * 100)}% coverage.`)\n    return sortedFiles\n  }\n}\n\n/** @internal */\nexport async function checkFileInArchive(asarFile: string, relativeFile: string, messagePrefix: string) {\n  function error(text: string) {\n    return new Error(`${messagePrefix} \"${relativeFile}\" in the \"${asarFile}\" ${text}`)\n  }\n\n  let fs\n  try {\n    fs = await readAsar(asarFile)\n  }\n  catch (e) {\n    throw error(`is corrupted: ${e}`)\n  }\n\n  let stat: Node | null\n  try {\n    stat = fs.getFile(relativeFile)\n  }\n  catch (e) {\n    const fileStat = await statOrNull(asarFile)\n    if (fileStat == null) {\n      throw error(`does not exist. Seems like a wrong configuration.`)\n    }\n\n    // asar throws error on access to undefined object (info.link)\n    stat = null\n  }\n\n  if (stat == null) {\n    throw error(`does not exist. Seems like a wrong configuration.`)\n  }\n  if (stat.size === 0) {\n    throw error(`is corrupted: size 0`)\n  }\n}\n"]}
