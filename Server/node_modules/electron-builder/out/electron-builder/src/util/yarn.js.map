{"version":3,"file":"yarn.js","sourceRoot":"","sources":["../../../../src/util/yarn.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, Lazy, log, spawn, warn } from \"electron-builder-util\"\nimport { exists } from \"electron-builder-util/out/fs\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { Config } from \"../metadata\"\nimport { Dependency } from \"./packageDependencies\"\n\n/** @internal */\nexport async function installOrRebuild(config: Config, appDir: string, options: RebuildOptions, forceInstall: boolean = false) {\n  const effectiveOptions = Object.assign({\n    buildFromSource: config.buildDependenciesFromSource === true,\n    additionalArgs: asArray(config.npmArgs),\n  }, options)\n\n\n  if (forceInstall || !(await exists(path.join(appDir, \"node_modules\")))) {\n    await installDependencies(appDir, effectiveOptions)\n  }\n  else {\n    await rebuild(appDir, effectiveOptions)\n  }\n}\n\n/** @internal */\nexport interface DesktopFrameworkInfo {\n  version: string\n  useCustomDist: boolean\n}\n\nfunction getElectronGypCacheDir() {\n  return path.join(homedir(), \".electron-gyp\")\n}\n\n/** @internal */\nexport function getGypEnv(frameworkInfo: DesktopFrameworkInfo, platform: string, arch: string, buildFromSource: boolean) {\n  if (!frameworkInfo.useCustomDist) {\n    return Object.assign({}, process.env, {\n      npm_config_arch: arch,\n      npm_config_target_arch: arch,\n      npm_config_platform: platform,\n      npm_config_build_from_source: buildFromSource,\n    })\n  }\n\n  // https://github.com/nodejs/node-gyp/issues/21\n  return Object.assign({}, process.env, {\n    npm_config_disturl: \"https://atom.io/download/electron\",\n    npm_config_target: frameworkInfo.version,\n    npm_config_runtime: \"electron\",\n    npm_config_arch: arch,\n    npm_config_target_arch: arch,\n    npm_config_platform: platform,\n    npm_config_build_from_source: buildFromSource,\n    npm_config_devdir: getElectronGypCacheDir(),\n\n  })\n}\n\nfunction installDependencies(appDir: string, options: RebuildOptions): Promise<any> {\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log(`Installing app dependencies for arch ${arch} to ${appDir}`)\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const execArgs = [\"install\", \"--production\"]\n\n  if (!isYarnPath(execPath)) {\n    if (process.env.NPM_NO_BIN_LINKS === \"true\") {\n      execArgs.push(\"--no-bin-links\")\n    }\n    execArgs.push(\"--cache-min\", \"999999999\")\n  }\n\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.unshift(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  if (additionalArgs != null) {\n    execArgs.push(...additionalArgs)\n  }\n  return spawn(execPath, execArgs, {\n    cwd: appDir,\n    env: getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true),\n  })\n}\n\nfunction getPackageToolPath() {\n  if (process.env.FORCE_YARN === \"true\") {\n    return process.platform === \"win32\" ? \"yarn.cmd\" : \"yarn\"\n  }\n  else {\n    return process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n}\n\nfunction isYarnPath(execPath: string | null | undefined) {\n  return process.env.FORCE_YARN === \"true\" || (execPath != null && path.basename(execPath).startsWith(\"yarn\"))\n}\n\nexport interface RebuildOptions {\n  frameworkInfo: DesktopFrameworkInfo\n  productionDeps?: Lazy<Array<Dependency>>\n\n  platform?: string\n  arch?: string\n\n  buildFromSource?: boolean\n\n  additionalArgs?: Array<string> | null\n}\n\n/** @internal */\nexport async function rebuild(appDir: string, options: RebuildOptions) {\n  const nativeDeps = await BluebirdPromise.filter(await options.productionDeps!.value, it => exists(path.join(it.path, \"binding.gyp\")), {concurrency: 8})\n  if (nativeDeps.length === 0) {\n    log(`No native production dependencies`)\n    return\n  }\n\n  const platform = options.platform || process.platform\n  const arch = options.arch || process.arch\n  const additionalArgs = options.additionalArgs\n\n  log(`Rebuilding native production dependencies for ${platform}:${arch}`)\n\n  let execPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const isYarn = isYarnPath(execPath)\n  const execArgs: Array<string> = []\n  if (execPath == null) {\n    execPath = getPackageToolPath()\n  }\n  else {\n    execArgs.push(execPath)\n    execPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const env = getGypEnv(options.frameworkInfo, platform, arch, options.buildFromSource === true)\n  if (isYarn) {\n    execArgs.push(\"run\", \"install\", \"--\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    await BluebirdPromise.map(nativeDeps, dep => {\n      log(`Rebuilding native dependency ${dep.name}`)\n      return spawn(execPath!, execArgs, {\n        cwd: dep.path,\n        env: env,\n      })\n        .catch(error => {\n          if (dep.optional) {\n            warn(`Cannot build optional native dep ${dep.name}`)\n          }\n          else {\n            throw error\n          }\n        })\n    }, {concurrency: process.platform === \"win32\" ? 1 : 2})\n  }\n  else {\n    execArgs.push(\"rebuild\")\n    if (additionalArgs != null) {\n      execArgs.push(...additionalArgs)\n    }\n    execArgs.push(...nativeDeps.map(it => it.name))\n    await spawn(execPath, execArgs, {\n      cwd: appDir,\n      env: env,\n    })\n  }\n}\n"]}
