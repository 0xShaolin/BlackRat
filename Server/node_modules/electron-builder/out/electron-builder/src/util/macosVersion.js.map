{"version":3,"file":"macosVersion.js","sourceRoot":"","sources":["../../../../src/util/macosVersion.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAiBA,AAAgB,AAChB,AAAM;;qEAAC,AAAK,WAA0C,AAAa;AACjE,cAAM,AAAO,UAAG,MAAM,AAAY,aAAC,AAAK;AACxC,AAAM,eAAC,AAAM,4BAAC,AAAG,IAAC,AAAK,MAAC,AAAO,AAAC,UAAE,AAAK,MAAC,AAAK,AAAC,AAAC,AACjD;AAAC;;;;;;AAED,AAAgB,AAChB,AAAM;;;;qEAAC,AAAK;AACV,AAAM,eAAC,AAAO,QAAC,AAAQ,aAAK,AAAQ,aAAI,MAAM,AAA+B,gCAAC,AAAS,AAAC,AAC1F;AAAC;;;;;;;;;;;AA1BD,AAAO,AAAE,AAAI,AAAE,AAAM,AAAuB;;;;;;AAC5C,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAK,AAAM,AAAM,AAAQ;;;;;;AAEhC,MAAM,AAAY,mIAAoB,AAAK;AACzC,UAAM,AAAI,OAAG,MAAM,AAAQ,8CAAC,AAAkD,oDAAE,AAAM,AAAC;AACvF,UAAM,AAAO,UAAG,AAA6D,8DAAC,AAAI,KAAC,AAAI,AAAC;AACxF,AAAE,AAAC,QAAC,CAAC,AAAO,AAAC,SAAC,AAAC;AACb,cAAM,IAAI,AAAK,MAAC,AAAiC,AAAC,AACpD;AAAC;AACD,AAAM,WAAC,AAAO,QAAC,AAAC,AAAC,AACnB;AAAC,AAAC,CAPmB,AAAI,AAAI;AAS7B,eAAe,AAAe;AAC5B,AAAM,WAAC,AAAO,QAAC,AAAK,MAAC,AAAG,AAAC,KAAC,AAAM,WAAK,AAAC,AAAG,OAAG,AAAO,OAAI,OAAG,AAAO,AACnE;AAAC","sourcesContent":["import { Lazy } from \"electron-builder-util\"\nimport { readFile } from \"fs-extra-p\"\nimport * as semver from \"semver\"\n\nconst macOsVersion = new Lazy<string>(async () => {\n  const file = await readFile(\"/System/Library/CoreServices/SystemVersion.plist\", \"utf8\")\n  const matches = /<key>ProductVersion<\\/key>[\\s\\S]*<string>([\\d.]+)<\\/string>/.exec(file)\n  if (!matches) {\n    throw new Error(\"Couldn't find the macOS version\")\n  }\n  return matches[1]\n})\n\nfunction clean(version: string) {\n  return version.split(\".\").length === 2 ? `${version}.0` : version\n}\n\n/** @internal */\nexport async function isOsVersionGreaterThanOrEqualTo(input: string) {\n  const version = await macOsVersion.value\n  return semver.gte(clean(version), clean(input))\n}\n\n/** @internal */\nexport async function isMacOsSierra() {\n  return process.platform === \"darwin\" && await isOsVersionGreaterThanOrEqualTo(\"10.12.0\")\n}\n"]}
