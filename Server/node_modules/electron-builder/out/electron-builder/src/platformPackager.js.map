{"version":3,"file":"platformPackager.js","sourceRoot":"","sources":["../../../src/platformPackager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAO,AAAE,AAAW,AAAE,AAAM,AAAgB,AAC5C,AAAO,AAAe,AAAM,AAAc;;;;;;AAC1C,AAAO,AAAE,AAAO,AAAE,AAAe,AAAE,AAAI,AAAE,AAAG,AAAE,AAAG,AAAE,AAAI,AAAE,AAAM,AAAuB;;;;;;AACtF,AAAO,AAAE,AAAU,AAAE,AAAM,AAAsC;;;;;;AACjE,AAAO,AAAE,AAAO,AAAE,AAAU,AAAE,AAAc,AAAE,AAAM,AAA8B;;;;;;AAClF,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAmC;;;;;;AACpE,AAAO,AAAE,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;AAE5C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAO,AAAE,AAAI,AAAE,AAAa,AAAE,AAAQ,AAAiC,AAAM,AAAQ;;;;;;AACrF,AAAO,AAAE,AAAS,AAAE,AAAiB,AAAe,AAAe,AAAE,AAAM,AAAe;;;;;;AAC1F,AAAO,AAAE,AAAiB,AAAE,AAAqB,AAAE,AAAM,AAAmB;;;;;;AAG5E,AAAO,AAAE,AAAc,AAAE,AAAU,AAAE,AAAM,AAAwB;;;;;;AAEnE,AAAO,AAAE,AAAY,AAAE,AAAM,AAAsB;;;;;;AACnD,AAAO,AAAE,AAAmB,AAAE,AAAa,AAAE,AAAM,AAAsB;;;;;;AACzE,AAAO,AAAE,AAAY,AAAE,AAAkB,AAAE,AAA8B,AAAE,AAAM,AAAiB;;;;;;AAClG,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAyB,AAE1D,AAAM;;;;;;;;;AAoBJ,gBAAqB,AAAc;AAAd,aAAI,OAAJ,AAAI,AAAU;AANlB,aAAa,gBAAG,AAAI,AAAI,+DAAgB,MAAM,AAAgB,oDAAC,AAAO,6CAAC,AAAI,KAAC,AAAiB,AAAC,oBAAE,AAAE,AAAC,AAAC;AAOnH,AAAI,aAAC,AAAM,SAAG,AAAI,KAAC,AAAM;AACzB,AAAI,aAAC,AAA4B,+BAAG,AAAgB,iBAAC,AAAqC,sCAAO,AAAI,KAAC,AAAO,OAAC,AAAI,KAAC,AAAQ,SAAC,AAAqB,AAAC,AAAC;AACnJ,AAAI,aAAC,AAAO,UAAG,AAAI,KAAC,AAAc,eAAC,AAAI,KAAC,AAAO,AAAC;AAChD,AAAI,aAAC,AAAe,kBAAG,AAAI,KAAC,AAAO;AACnC,AAAI,aAAC,AAAU,aAAG,AAAI,KAAC,AAAU;AAEjC,AAAI,aAAC,AAAiB,oBAAG,AAAI,MAAC,AAAO,QAAC,AAAI,KAAC,AAAU,YAAE,AAAI,KAAC,AAA6B,AAAC,AAC5F;AAAC;AAlBD,QAAI,AAAY;AACd,AAAM,eAAC,AAAI,KAAC,AAAa,cAAC,AAAK,AACjC;AAAC;AAoBS,AAAc,mBAAC,AAAgB;AACvC,AAAM,eAAC,AAAO,AAChB;AAAC;AAEO,AAAM,WAAC,AAAqC,sCAAC,AAAgB;AACnE,AAAM,eAAC,AAAO,WAAI,AAAI,OAAG,AAAM,OAAC,AAAM,OAAC,AAAI,AAAC,QAAG,AAAO,AACxD;AAAC;AAIS,AAAc;AACtB,cAAM,AAAQ,WAAG,AAAI,KAAC,AAAgB,AAAE;AACxC,AAAE,AAAC,YAAC,AAAe,2EAAC,AAAQ,AAAC,AAAC,WAAC,AAAC;AAC9B,AAAG,2EAAC,AAA8D,AAAC;AACnE,AAAM,mBAAC,AAAE,AACX;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAS,SAAC,AAAI,AAAE,AACzB;AAAC,AACH;AAAC;AAES,AAAgB;AACxB,cAAM,AAAc,iBAAG,AAAI,KAAC,AAAe,gBAAC,AAAc;AAC1D,AAAmC;AACnC,AAAM,eAAC,AAAc,kBAAI,AAAI,OAAG,AAAO,QAAC,AAAG,IAAC,AAAgB,mBAAG,AAAc,AAC/E;AAAC;AAED,QAAI,AAA6B;AAC/B,AAAM,eAAC,AAAG,+DAAC,AAAI,KAAC,AAAM,OAAC,AAAW,aAAE,AAAE,MAAI,AAAG,GAAC,AAAc,AAAC,mBAAI,AAAO,AAC1E;AAAC;AAES,AAAgB,qBAAC,AAAc,QAAE,AAAU;AACnD,AAAM,eAAC,AAAI,KAAC,AAAe,gBAAC,AAAW,eAAI,AAAI,MAAC,AAAI,KAAC,AAAM,AAAE,WAAG,AAAI,KAAC,AAAQ,SAAC,AAAqB,wBAAG,AAAa,2CAAC,AAAI,AAAC,QAAG,AAAI,KAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,MAAG,AAAE,KAAG,AAAW,WAAE,AAAC,AAClL;AAAC;AAED,AAAuB,4BAAC,AAAY,MAAE,AAAqB,QAAE,AAAiB,MAAE,AAAyB;AACvG,AAAI,aAAC,AAAI,KAAC,AAAuB;AAC/B,AAAI,kBAAE,AAAgB,kBAAE,AAAM,QAAE,AAAI;AACpC,AAAQ,sBAAE,AAAI,AACf,AAAC,AACJ;AAJoC;AAInC;AAEK,AAAI,QAAV,AAAK,CAAM,AAAc,QAAE,AAAU,MAAE,AAAsB,SAAE,AAA6B;;;;AAC1F,kBAAM,AAAS,YAAG,AAAI,MAAC,AAAgB,iBAAC,AAAM,QAAE,AAAI,AAAC;AACrD,kBAAM,AAAI,MAAC,AAAM,OAAC,AAAM,QAAE,AAAS,WAAE,AAAI,MAAC,AAAQ,SAAC,AAAQ,UAAE,AAAI,MAAE,AAAI,MAAC,AAA4B,8BAAE,AAAO,AAAC;AAC9G,AAAI,kBAAC,AAA4B,6BAAC,AAAS,WAAE,AAAI,MAAE,AAAO,SAAE,AAAW,AAAC,AAC1E;;AAAC;AAES,AAA4B,iCAAC,AAAiB,WAAE,AAAU,MAAE,AAAsB,SAAE,AAA6B;AACzH,AAAW,oBAAC,AAAO,QAAC,AAAe,gDAAC,AAAG,IAAC,AAAO,SAAE,AAAE,MAAI,AAAE,GAAC,AAAgB,mBAAG,AAAE,GAAC,AAAK,MAAC,AAAS,WAAE,AAAI,AAAC,QAAG,AAAI,AAAC,MAC3G,AAAI,KAAC,MAAM,AAAe,gDAAC,AAAI,KAAC,AAAO,SAAE,AAAE,MAAI,AAAE,GAAC,AAAgB,mBAAG,AAAI,OAAG,AAAE,GAAC,AAAK,MAAC,AAAS,WAAE,AAAI,AAAC,AAAC,AAAC,AAAC,AAC7G;AAAC;AAEO,AAAoB,yBAAC,AAAoB,aAAE,AAAiB,WAAE,AAA0C,eAAE,AAAsB;AACtI,cAAM,AAAI,OAAG,AAAW,cAAG,AAAI,KAAC,AAAe,gBAAC,AAAS,AAAC,AAAG,aAAC,AAAI,KAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,MAAG,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,cAAG,AAAI,KAAC,AAAO,QAAC,AAAe,eAAM,QAAE,AAAU,AAAC,cAAG,AAAS,AAAC;AACnL,AAAM,eAAC,AAAe,2DAAC,AAAI,KAAC,AAAM,QAAE,AAAW,cAAG,AAAgB,mBAAG,AAAY,cAAE,AAAI,KAAC,AAAU,YAAE,AAAI,MAAE,AAAI,MAAE,AAAa,eAAE,AAAkB,AAAC,AACpJ;AAAC;AAED,QAAI,AAAwB;AAC1B,AAAM,eAAC,AAAI,KAAC,AAAM,OAAC,AAAW,eAAI,AAAI,OAAG,AAAc,iBAAG,AAAW,AACvE;AAAC;AAED,QAAI,AAA0B;AAC5B,AAAM,eAAC,AAAI,KAAC,AAAM,OAAC,AAAW,eAAI,AAAI,OAAG,AAAU,aAAG,AAAO,AAC/D;AAAC;AAED,QAAI,AAA+B;AACjC,AAAM,eAAC,AAAI,KAAC,AAAM,OAAC,AAAW,eAAI,AAAI,OAAG,AAAU,aAAG,AAAO,AAC/D;AAAC;AAEe,AAAM,UAAZ,AAAK,CAAQ,AAAc,QAAE,AAAiB,WAAE,AAAoB,cAAE,AAAU,MAAE,AAAgC,8BAAE,AAAsB;;;;AAClJ,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAe,gBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AAC7C,AAAM,AACR;AAAC;AAED,kBAAM,AAAW,cAAG,MAAM,AAAI,OAAC,AAAkB,mBAAC,AAA4B,AAAC;AAC/E,kBAAM,AAAa,0BAAI,AAAU;AAAX,uBAAgB,AAAI,OAAC,AAAW,YAAC,AAAE,IAAE,AAAI,QAAI,AAAI,OAAG,AAAI,OAAG,AAAI,6BAAC,AAAI,AAAC,OAAE,EAAC,AAAI,MAAE,AAAU,AAAC,AAAC;;AAChH,kBAAM,AAAqB,wBAAG,AAAI,OAAC,AAAoB,qBAAC,AAAI,MAAE,AAAS,WAAE,AAAa,eAAE,AAA4B,AAAC;AACrH,kBAAM,AAAiB,oBAAG,AAAI,OAAC,AAAoB,qBAAC,AAAK,OAAE,AAAS,WAAE,AAAa,eAAE,AAA4B,AAAC;AAElH,kBAAM,AAAa,gBAAG,AAAI,OAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,MAAG,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,OAAC,AAAwB,0BAAE,AAAU,YAAE,AAAW,AAAC,eAAG,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAW,AAAC;AAEvK,kBAAM,AAAW,cAAG,AAAI,OAAC,AAAM,OAAC,AAAW;AAC3C,kBAAM,AAAU,aAAG,AAAW,eAAI,AAAI;AACtC,kBAAM,AAAM,SAAG,AAAI,OAAC,AAAM;AAC1B,AAAG,AAAC,4FAAiB,AAAY,gBAAI,AAAI,6BAAC,AAAI,AAAC,eAAU,AAAU,AAAG,yBAAY,AAAM,OAAC,AAAe,eAAE,AAAG,aAAQ,AAAW,WAAE,SAAO,AAAI,MAAC,AAAQ,SAAC,AAAI,OAAC,AAAU,YAAE,AAAS,AAAC,UAAE,AAAC;AAErL,kBAAM,AAAM,SAAG,AAAI,OAAC,AAAI,KAAC,AAAM;AAC/B,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAI,KAAC,AAAkB,AAAC,oBAAC,AAAC;AACjC,sBAAM,AAAc,AAAC,AAAI,kEAAE,AAAS,WAAE,AAAY,cAAE,AAAI,6BAAC,AAAI,AAAC,OAAE,AAAM,OAAC,AAAgB,AAAC,AAC1F;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAM,sBAAC,AAAU,aAAG,AAAc,AAAC,AAAI,kEAAE,AAAS,WAAE,AAAY,cAAE,AAAI,6BAAC,AAAI,AAAC,OAAE,AAAM,OAAC,AAAgB,AAAC,mBAAG,AAAU,AAAC,AAAI,8DAAE,AAAS,WAAE,AAAY,cAAE,AAAI,6BAAC,AAAI,AAAC,OAAE,AAAY,AAAC,AAAC,AAC/K;AAAC;AAED,gBAAI,AAAS,YAAQ,AAAI;AACzB,kBAAM,AAAe,kBAAqB,AAAE;AAC5C,AAAE,AAAC,gBAAC,AAAqB,yBAAI,AAAI,AAAC,MAAC,AAAC;AAClC,AAAG,AAAC,qBAAC,MAAM,AAAO,WAAI,AAAqB,AAAC,uBAAC,AAAC;AAC5C,AAAO,4BAAC,AAAqB,sBAAC,AAAe,iBAAE,AAAI,OAAC,AAAI,KAAC,AAAU,AAAC,AACtE;AAAC,AACH;AAAC;AACD,AAAE,AAAC,gBAAC,AAAiB,qBAAI,AAAI,AAAC,MAAC,AAAC;AAC9B,AAAG,AAAC,qBAAC,MAAM,AAAO,WAAI,AAAiB,AAAC,mBAAC,AAAC;AACxC,AAAO,4BAAC,AAAqB,sBAAC,AAAe,iBAAE,AAAI,OAAC,AAAI,KAAC,AAAU,AAAC,AACtE;AAAC,AACH;AAAC;AAED,kBAAM,AAAW;AACf,AAAS,2BAAE,AAAM,QAAE,AAAI,MAAE,AAAO;AAChC,AAAQ,AAAE,AAAI;AACd,AAAoB,sCAAE,AAAY,AACnC;AAJqC;AAMtC,kBAAM,AAAc,iBAAG,AAAiB,6DAAC,AAAM,QAAE,AAAa,eAAE,AAAa,eAAE,AAA4B,AAAE,AAAI,sCAAE,AAAM,AAAC;AAC1H,kBAAM,AAAiB,oBAAG,AAAW,eAAI,AAAI,QAAI,AAAqB,yEAAC,AAAI,OAAC,AAAI,AAAC;AACjF,AAAE,AAAC,gBAAC,AAAiB,AAAC,mBAAC,AAAC;AACtB,AAAc,+BAAC,AAAU,WAAC,AAAiB,AAAC,AAC9C;AAAC;AAED,kBAAM,AAAM,SAAG,AAAc,eAAC,AAAY,aAAC,AAAS,WAAE,AAAe,gBAAC,AAAM,SAAG,AAAC,IAAG,AAAe,kBAAG,AAAI,AAAC;AAE1G,kBAAM,AAAW,cAAG,MAAM,AAAiB,qEAAC,AAAM,mCAA6B,AAAM;AACnF,AAAY,8BAAE,AAAI,OAAC,AAAI,KAAC,AAAQ,SAAC,AAAI;AACrC,AAAI,AAAE,AAA8B,AACrC;AAHqF,aAAd,AAAM,EAG3E,AAAM,OAAC,AAAa,AAAC,cAH4B,AAAiB,GAG1C,AAAM,OAAC,AAAa,AAAC;AAChD,kBAAM,AAAW,cAAG,AAAI,AAAgB,qEAAC,AAAI,OAAC,AAAI,KAAC,AAAiB,AAAC;AAErE,kBAAM,AAAgB,mBAAG,AAAI,AAAmB,kEAAC,AAAW,AAAC;AAC7D,kBAAM,AAAU,aAAG,AAAI,AAAa,4DAAC,AAAM,QAAE,AAAI,OAAC,AAAI,MAAE,AAAM,AAAC;AAE/D,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAI,KAAC,AAAkB,AAAC,oBAAC,AAAC;AACjC,AAAW,4BAAC,AAAO,QAAC,AAAO,iCAAC,AAAM,QAAE,AAAI,MAAC,AAAI,KAAC,AAAa,AAAC,gBAAE,AAAM,QAAE,AAAW,AAAC,AAAC,AACrF;AAAC,AACD,AAAI,uBAAK,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AAC7B,AAAW,4BAAC,AAAO,QAAC,AAAY,4DAAC,AAAU,YAAE,AAAgB,kBAAE,AAAI,MAAC,AAAI,KAAC,AAAa,eAAE,AAAK,AAAC,AAAC,AAAC,AAClG;AAAC,AACD,AAAI,aAHC,AAAE,AAAC,MAGH,AAAC;AACJ,sBAAM,AAAa,gBAAG,AAAe,2DAAC,AAAM,QAAE,AAAY,cAAE,AAAM,QAAE,AAAI,MAAC,AAAI,KAAC,AAAa,eAAE,AAAK,AAAC,QAAE,AAAK,OAAE,AAAa,eAAE,AAA4B,AAAC;AACxJ,sBAAM,AAAW,cAAG,AAAa,iBAAI,AAAI,OAAG,AAAI,OAAG,AAAa,cAAC,AAAC,AAAC;AACnE,AAAW,4BAAC,AAAO,QAAC,AAAI,AAAY,iDAAC,AAAM,QAAE,AAAa,eAAE,AAAW,aAAE,AAAW,eAAI,AAAI,OAAG,AAAI,OAAG,AAAW,YAAC,AAAY,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAiB,AAAE,AAAI,2BAAE,AAAU,YAAE,AAAgB,AAAC,AAAC,AAChM;AAAC;AAED,AAAW,wBAAC,AAAO,QAAC,AAAc,wCAAC,AAAI,MAAC,AAAI,KAAC,AAAa,eAAE,AAAkB,AAAC,AAAC,AAAC;AACjF,AAAW,wBAAC,AAAO,QAAC,AAAc,wCAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAS,AAAC,AAAC,AAAC;AACpE,AAAW,wBAAC,AAAO,QAAC,AAAI,OAAC,AAAW,YAAC,AAAW,AAAC,AAAC;AAClD,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,AAAC,KAAC,AAAC;AACnC,AAAW,4BAAC,AAAO,QAAC,AAAM,4CAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAS,AAAC,YAAE,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAsB,AAAC,AAAC,yBAAC,AAAK,MAAC,YAAmB,CAAC,AAAC,AAAC,AACxI;AAAC;AAED,kBAAM,AAAW,YAAC,AAAU,AAAE;AAE9B,AAAE,AAAC,gBAAC,AAAY,iBAAK,AAAQ,YAAI,AAAY,iBAAK,AAAK,AAAC,OAAC,AAAC;AACxD,sBAAY,AAAO,QAAC,AAAgB,AAAE,kBAAC,AAAS,AAAC,AAAI,kBAAE,AAAS,WAAE,AAAW,eAAI,AAAI,OAAG,AAAI,OAAG,MAAM,AAAW,2DAAC,AAAa,eAAE,AAAW,YAAC,AAAe,kBAAG,EAAC,AAAe,iBAAE,AAAI,AAAC,SAAG,AAAI,AAAC,AAAC,AAChM;AAAC;AAED,kBAAM,AAAS,qDAAC,AAAqB,AAAC;AACtC,kBAAM,AAAS,qDAAC,AAAiB,AAAC;AAElC,AAAE,AAAC,gBAAC,AAAI,OAAC,AAAI,KAAC,AAAiB,kBAAC,AAAS,AAAC,WAAC,AAAC;AAC1C,AAAM,AACR;AAAC;AAED,kBAAM,AAAI,OAAC,AAAI,KAAC,AAAS,UAAC,AAAW,AAAC;AACtC,kBAAM,AAAI,OAAC,AAAkB,mBAAC,AAAS,WAAE,AAAW,eAAI,AAAI,AAAC;AAC7D,kBAAM,AAAI,OAAC,AAAO,QAAC,AAAW,AAAC,AACjC;;AAAC;AAEe,AAAW,eAAjB,AAAK,CAAa,AAA6B;AACzD;AAAC;AAES,AAAO,YAAC,AAA6B;AAC7C,AAAM,eAAC,AAAe,gDAAC,AAAO,AAAE,AAClC;AAAC;AAEK,AAAW,eAAjB,AAAK;;AACH,AAAM,mBAAC,AAAI,AACb;;AAAC;AAEa,AAAkB,sBAAxB,AAAK,CAAoB,AAAsB;;;;AACrD,kCAAsB,AAAY;AAChC,AAAM,AAAC,0BAAG,AAAI,IAAwE,AACxF;AAAC;AAED,kBAAM,AAAa,gBAAQ,AAAI,OAAC,AAAM;AACtC,AAAE,AAAC,gBAAC,AAAa,cAAC,AAAa,AAAC,kBAAI,AAAI,AAAC,MAAC,AAAC;AACzC,sBAAM,IAAI,AAAK,MAAC,AAAY,aAAC,AAAa,AAAC,AAAC,AAC9C;AAAC;AACD,AAAE,AAAC,gBAAC,AAAa,cAAC,AAAiB,AAAC,sBAAI,AAAI,AAAC,MAAC,AAAC;AAC7C,sBAAM,IAAI,AAAK,MAAC,AAAY,aAAC,AAAiB,AAAC,AAAC,AAClD;AAAC;AAED,kBAAM,AAAgB,mBAAG,AAAkB,mBAAC,AAAI;AAChD,kBAAM,AAAM,SAAG,AAAgB,oBAAI,AAAI,OAAG,AAAI,OAAC,AAAM,OAAC,AAAI,OAAG,AAAgB;AAC7E,AAAE,AAAC,gBAAC,AAAM,WAAK,AAAK,AAAC,OAAC,AAAC;AACrB,sBAAM,AAAW,cAAG,MAAM,AAAU,oCAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAI,KAAC,AAAM,QAAE,AAAU,AAAC,AAAC;AAC7E,AAA8B;AAC9B,AAAE,AAAC,oBAAC,AAAW,eAAI,AAAI,QAAI,CAAC,AAAW,YAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AACjD,AAAI,oFAAC,AAA8E,iFACjF,AAA0F,AAAC,AAC/F;AAAC;AACD,AAAM,uBAAC,AAAI,AACb;AAAC;AAED,AAAE,AAAC,gBAAC,AAAM,UAAI,AAAI,QAAI,AAAM,WAAK,AAAI,AAAC,MAAC,AAAC;AACtC,AAAM,uBAAC,AAAE,AACX;AAAC;AAED,AAAG,AAAC,iBAAC,MAAM,AAAI,QAAI,CAAC,AAAW,aAAE,AAAQ,AAAC,AAAC,WAAC,AAAC;AAC3C,AAAE,AAAC,oBAAO,AAAO,OAAC,AAAI,AAAC,SAAI,AAAI,AAAC,MAAC,AAAC;AAChC,0BAAM,IAAI,AAAK,MAAC,AAAY,AAAC,qBAAQ,AAAI,IAAE,AAAC,AAAC,AAC/C;AAAC,AACH;AAAC;AACD,AAAM,mBAAC,AAAU,oDAAC,AAAE,IAAE,AAAM,AAAC,AAC/B;;AAAC;AAEM,AAAiB,sBAAC,AAAY;AACnC,AAAM,eAAC,AAAI,MAAC,AAAO,QAAC,AAAI,KAAC,AAAU,YAAE,AAAI,AAAC,AAC5C;AAAC;AAEM,AAAyB,8BAAC,AAAiB;AAChD,AAAM,eAAC,AAAS,AAClB;AAAC;AAEM,AAAe,oBAAC,AAAiB;AACtC,AAAM,eAAC,AAAI,KAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,MAAG,AAAI,KAAC,AAAoB,qBAAC,AAAS,AAAC,aAAG,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAW,AAAC,AAClH;AAAC;AAEM,AAAoB,yBAAC,AAAiB;AAC3C,AAAM,eAAC,AAAI,MAAC,AAAI,KAAC,AAAS,AAAE,cAAG,AAAI,KAAC,AAAO,QAAC,AAAe,eAAM,QAAE,AAAU,YAAE,AAAW,AAAC,AAC7F;AAAC;AAEa,AAAkB,sBAAxB,AAAK,CAAoB,AAAoB,cAAE,AAAY,MAAE,AAAqB,eAAE,AAAe;;;;AACzG,kBAAM,AAAY,eAAG,AAAI,MAAC,AAAQ,SAAC,AAAI,OAAC,AAAI,KAAC,AAAM,QAAE,AAAI,MAAC,AAAO,QAAC,AAAI,OAAC,AAAI,KAAC,AAAM,QAAE,AAAI,AAAC,AAAC;AAC1F,AAAE,AAAC,gBAAC,AAAM,AAAC,QAAC,AAAC;AACX,sBAAM,AAAkB,wDAAC,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAU,AAAC,aAAE,AAAY,cAAE,AAAa,AAAC;AAC1F,AAAM,AACR;AAAC;AAED,kBAAM,AAAU,aAAG,AAAI,MAAC,AAAK,MAAC,AAAI,AAAC;AACnC,AAAoH;AACpH,AAA8F;AAC9F,AAAE,AAAC,gBAAC,AAAU,WAAC,AAAG,IAAC,AAAQ,QAAC,AAAO,AAAC,AAAC,iBAAC,AAAC;AACrC,AAA4G;AAC5G,AAAmG;AACnG,sBAAM,AAAS,YAAkB,AAAU,WAAC,AAAG,IAAC,AAAK,MAAC,AAAI,MAAC,AAAG,AAAC;AAC/D,oBAAI,AAAiB,oBAAG,AAAC;AACzB,AAAS,0BAAC,AAAI,KAAC,UAAC,AAAgB,UAAE,AAAa;AAC7C,AAAiB,wCAAG,AAAK;AACzB,AAAM,2BAAC,AAAQ,SAAC,AAAQ,SAAC,AAAO,AAAC,AACnC;AAAC,AAAC;AACF,sBAAM,AAAQ,WAAG,AAAI,MAAC,AAAI,KAAC,AAAK,AAAC,AAAI,aAAE,AAAS,UAAC,AAAK,MAAC,AAAC,GAAE,AAAiB,oBAAG,AAAC,AAAC,AAAC;AACjF,oBAAI,AAAQ,WAAG,AAAS,UAAC,AAAM,AAAG,SAAC,AAAiB,oBAAG,AAAC,AAAC,IAAG,AAAI,MAAC,AAAI,KAAC,AAAK,MAAC,AAAS,UAAC,AAAK,MAAC,AAAiB,oBAAG,AAAC,AAAC,AAAC,MAAG,AAAE;AACxH,AAAQ,4BAAI,AAAI,MAAC,AAAI,KAAC,AAAQ,UAAE,AAAU,WAAC,AAAI,AAAC;AAChD,sBAAM,AAAkB,wDAAC,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAK,OAAE,AAAQ,AAAC,WAAE,AAAQ,UAAE,AAAa,AAAC,AAC7F;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,sBAAM,AAAO,UAAG,MAAM,AAAU,oCAAC,AAAI,MAAC,AAAI,KAAC,AAAY,cAAE,AAAK,OAAE,AAAY,AAAC,AAAC;AAC9E,AAAE,AAAC,oBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,0BAAM,IAAI,AAAK,AAAC,SAAG,AAAa,kBAAK,AAAY,YAAqD,AAAC,AACzG;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,AAA8B;AAC9B,AAAE,AAAC,wBAAC,CAAC,AAAO,QAAC,AAAM,AAAE,AAAC,UAAC,AAAC;AACtB,8BAAM,IAAI,AAAK,AAAC,SAAG,AAAa,kBAAK,AAAY,YAAoD,AAAC,AACxG;AAAC,AACH;AAAC,AACH;AAAC,AACH;;AAAC;AAEa,AAAkB,sBAAxB,AAAK,CAAoB,AAAiB,WAAE,AAAe;;;;AACjE,kBAAM,AAAO,UAAG,MAAM,AAAU,oCAAC,AAAS,AAAC;AAC3C,AAAE,AAAC,gBAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,sBAAM,IAAI,AAAK,AAAC,2BAAqB,AAAS,SAAqD,AAAC,AACtG;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAA8B;AAC9B,AAAE,AAAC,oBAAC,CAAC,AAAO,QAAC,AAAW,AAAE,AAAC,eAAC,AAAC;AAC3B,0BAAM,IAAI,AAAK,AAAC,2BAAqB,AAAS,SAAyD,AAAC,AAC1G;AAAC,AACH;AAAC;AAED,kBAAM,AAAY,eAAG,AAAI,OAAC,AAAe,gBAAC,AAAS,AAAC;AACpD,kBAAM,AAAI,OAAC,AAAkB,mBAAC,AAAY,cAAE,AAAI,OAAC,AAAI,KAAC,AAAQ,SAAC,AAAI,QAAI,AAAU,YAAE,AAAwB,0BAAE,AAAM,AAAC;AACpH,kBAAM,AAAI,OAAC,AAAkB,mBAAC,AAAY,cAAE,AAAc,gBAAE,AAAa,eAAE,AAAM,AAAC,AACpF;;AAAC;AAED,AAAuB,4BAAC,AAAW,KAAE,AAAkB;YAAE,AAAa,oFAAG,AAAI;;AAC3E,AAAM,eAAC,AAAI,KAAC,AAAmB,oBAAC,AAAmC,qCAAE,AAAG,KAAE,AAAa,iBAAI,AAAI,SAAK,AAAI,6BAAC,AAAG,MAAG,AAAI,OAAG,AAAI,AAAC,AAC7H;AAAC;AAED,AAAyB,8BAAC,AAAgD,uBAAE,AAAW,KAAE,AAAkB,MAAE,AAAuB;YAAE,AAAa,oFAAG,AAAI;;AACxJ,YAAI,AAAO,UAAG,AAAqB,yBAAI,AAAI,OAAG,AAAI,OAAG,AAAqB,sBAAC,AAAY;AACvF,AAAE,AAAC,YAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAO,sBAAG,AAAI,KAAC,AAA4B,6BAAC,AAAY,gBAAI,AAAI,KAAC,AAAM,OAAC,AAAY,gBAAI,AAAc,kBAAI,AAA0C,AACtJ;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAmB,oBAAC,AAAO,SAAE,AAAG,KAAE,AAAa,iBAAI,AAAI,SAAK,AAAI,6BAAC,AAAG,MAAG,AAAI,OAAG,AAAI,AAAC,AACjG;AAAC;AAEO,AAAmB,wBAAC,AAAY,SAAE,AAAW,KAAE,AAA6B;AAClF,YAAI,AAAQ,WAAkB,AAAI,QAAI,AAAI,OAAG,AAAI,OAAG,AAAI,6BAAC,AAAI,AAAC;AAC9D,AAAE,AAAC,YAAC,AAAI,SAAK,AAAI,6BAAC,AAAG,AAAC,KAAC,AAAC;AACtB,AAAE,AAAC,gBAAC,AAAG,QAAK,AAAU,cAAI,AAAG,QAAK,AAAK,AAAC,OAAC,AAAC;AACxC,AAAQ,2BAAG,AAAQ,AACrB;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAG,QAAK,AAAK,AAAC,OAAC,AAAC;AACvB,AAAQ,2BAAG,AAAO,AACpB;AAAC,AACH;AAAC,AACD,AAAI,eAAC,AAAE,AAAC,IAAC,AAAI,SAAK,AAAI,6BAAC,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAE,AAAC,gBAAC,AAAG,QAAK,AAAK,SAAI,AAAG,QAAK,AAAU,AAAC,YAAC,AAAC;AACxC,AAAQ,2BAAG,AAAM,AACnB;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAG,QAAK,AAAQ,YAAI,AAAG,QAAK,AAAK,AAAC,OAAC,AAAC;AAC3C,AAAQ,2BAAG,AAAM,AACnB;AAAC,AACH;AAAC;AAED,AAAM,oBAAM,AAAW,YAAC,AAAO,SAAE,AAAI,KAAC,AAAQ,aAAK,AAAQ,iCAAC,AAAG,MAAG,AAAI,OAAG,AAAQ;AAC/E,AAAG,iBAAE,AAAG,AACT,AAAC,AACJ;AAHqF,SAA5E,AAAI;AAGZ;AAED,AAAW,gBAAC,AAAe,SAAE,AAAoB;YAAE,4EAAa,AAAE;YAAE,AAAsB,6FAAG,AAAI;;AAC/F,AAAE,AAAC,YAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAO,sBAAG,AAAO,QACd,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACvB,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACvB,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,IACvB,AAAO,QAAC,AAAU,YAAE,AAAE,AAAC,AAC5B;AAAC;AAED,cAAM,AAAO,UAAG,AAAI,KAAC,AAAO;AAC5B,AAAM,uBAAS,AAAO,QAAC,AAAsB,wBAAE,CAAC,AAAK,OAAE,AAAE;AACvD,AAAM,AAAC,oBAAC,AAAE,AAAC,AAAC,AAAC;AACX,qBAAK,AAAa;AAChB,AAAM,2BAAC,AAAsB,yBAAG,AAAO,QAAC,AAAe,kBAAG,AAAO,QAAC,AAAW;AAE/E,qBAAK,AAAM;AACT,AAAE,AAAC,wBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAwC;AACxC,AAAM,+BAAC,AAAE,AACX;AAAC;AACD,AAAM,2BAAC,AAAI;AAEb,qBAAK,AAAI;AACP,AAAM,2BAAC,AAAI,KAAC,AAAQ,SAAC,AAAqB;AAE5C,qBAAK,AAAS;AACZ,AAAM,2BAAC,AAAO,QAAC,AAAO,WAAI,AAAQ;AAEpC;AACE,AAAE,AAAC,wBAAC,AAAE,MAAI,AAAO,AAAC,SAAC,AAAC;AAClB,AAAM,+BAAO,AAAQ,QAAC,AAAE,AAAC,AAC3B;AAAC;AAED,AAAE,AAAC,wBAAC,AAAE,GAAC,AAAU,WAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AAC1B,8BAAM,AAAO,UAAG,AAAE,GAAC,AAAS,UAAC,AAAM,OAAC,AAAM,AAAC;AAC3C,8BAAM,AAAQ,WAAG,AAAO,QAAC,AAAG,IAAC,AAAO,AAAC;AACrC,AAAE,AAAC,4BAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,kCAAM,IAAI,AAAK,AAAC,aAAO,AAAO,OAAiB,AAAC,AAClD;AAAC;AACD,AAAM,+BAAC,AAAQ,AACjB;AAAC;AAED,0BAAM,AAAK,QAAG,AAAK,MAAC,AAAE,AAAC;AACvB,AAAE,AAAC,wBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,8BAAM,IAAI,AAAK,AAAC,eAAS,AAAE,EAAiB,AAAC,AAC/C;AAAC,AACD,AAAI,2BAAC,AAAC;AACJ,AAAM,+BAAC,AAAK,AACd;AAAC,AACL,AAAC,AACH;;AAAC,AAAC,AACJ,SAzCS,AAAO;AAyCf;AAED,AAAY,iBAAC,AAAkB,KAAE,AAAU,MAAE,AAAmB;YAAE,iFAA4B,AAAI;;AAChG,YAAI,AAAC,IAAkB,AAAI;AAC3B,YAAI,AAAC,IAAkB,AAAI;AAC3B,AAAE,AAAC,YAAC,AAAI,SAAK,AAAI,6BAAC,AAAG,AAAC,KAAC,AAAC;AACtB,AAAE,AAAC,gBAAC,AAAG,QAAK,AAAU,AAAC,YAAC,AAAC;AACvB,AAAC,oBAAG,AAAQ,AACd;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAG,QAAK,AAAK,AAAC,OAAC,AAAC;AACvB,AAAC,oBAAG,AAAO,AACb;AAAC,AACH;AAAC,AACD,AAAI,mBAAK,AAAI,SAAK,AAAI,6BAAC,AAAI,QAAI,AAAG,QAAK,AAAK,AAAC,OAAC,AAAC;AAC7C,AAAC,gBAAG,AAAM,AACZ;AAAC,AACD,AAAI,SAHC,AAAE,AAAC,UAGC,AAAG,QAAK,AAAQ,AAAC,UAAC,AAAC;AAC1B,AAAE,AAAC,gBAAC,AAAI,SAAK,AAAI,6BAAC,AAAI,AAAC,MAAC,AAAC;AACvB,AAAC,oBAAG,AAAM,AACZ;AAAC;AACD,AAAC,gBAAG,AAAY,AAClB;AAAC,AACD,AAAI,SANC,AAAE,AAAC,MAMH,AAAC;AACJ,AAAC,gBAAG,AAAI,6BAAC,AAAI,AAAC,AAChB;AAAC;AAED,AAAE,AAAC,YAAC,AAAC,KAAI,AAAI,AAAC,MAAC,AAAC;AACd,AAAC,gBAAG,AAAU,AAChB;AAAC,AACD,AAAI,eAAC,AAAE,AAAC,IAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AAC5B,AAAC,AAAI,qBAAI,AAAU,UAAE,AACvB;AAAC;AACD,AAAE,AAAC,YAAC,AAAC,KAAI,AAAI,AAAC,MAAC,AAAC;AACd,AAAC,gBAAG,AAAG,AACT;AAAC;AACD,AAAM,eAAC,AAAI,KAAC,AAAa,cAAC,AAAC,GAAE,AAAC,GAAE,AAAU,AAAC,AAC7C;AAAC;AAED,AAAa,kBAAC,AAAkB,KAAE,AAAsB,YAAE,AAAmB;AAC3E,cAAM,AAAM,SAAG,AAAG,OAAI,AAAI,OAAG,AAAE,AAAG,SAAI,AAAG,GAAE;AAC3C,cAAM,AAAS,YAAG,AAAG,QAAK,AAAK,QAAG,AAAG,MAAG,AAAG;AAC3C,AAAM,AAAC,kBAAG,AAAU,aAAG,AAAI,KAAC,AAAO,QAAC,AAAI,OAAG,AAAI,KAAC,AAAO,QAAC,AAAe,kBAAG,AAAS,YAAG,AAAI,KAAC,AAAO,QAAC,AAAO,UAAG,AAAU,cAAI,AAAI,OAAG,AAAE,AAAG,QAAG,AAAS,YAAG,AAAU,UAAE,KAAG,AAAM,MAAE,AAC/K;AAAC;AAEK,AAAc,kBAApB,AAAK,CAAgB,AAAW;;;;AAC9B,kBAAM,AAAY,eAAG,MAAM,AAAI,OAAC,AAAY;AAC5C,kBAAM,AAAI,AAAG,eAAQ,AAAG,GAAE;AAC1B,AAAE,AAAC,gBAAC,AAAY,aAAC,AAAQ,QAAC,AAAI,AAAC,AAAC,cAAC,AAAC;AAChC,AAAM,uBAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAiB,mBAAE,AAAI,AAAC,AAChD;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAI,gFAAC,AAAiE,AAAC;AACvE,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;;AAAC;AAED,AAAW,gBAAC,AAAc;AACxB,AAAM,eAAC,AAAI,KAAC,AAAI,KAAC,AAAc,eAAC,AAAW,YAAC,AAAM,AAAC,AACrD;AAAC;AAED,QAAI,AAAgB;AAClB,AAAM,eAAC,AAAO,mEAAC,AAAI,KAAC,AAAM,OAAC,AAAgB,AAAC,kBAAC,AAAM,OAAC,AAAO,mEAAC,AAAI,KAAC,AAA4B,6BAAC,AAAgB,AAAC,AAAC,AAClH;AAAC;AAEK,AAAW,eAAjB,AAAK,CAAa,AAAkB,AAAE;;;;AAAG,AAAoB;;;;AAC3D,AAAE,AAAC,gBAAC,AAAM,WAAK,AAAS,AAAC,WAAC,AAAC;AACzB,sBAAM,AAAY,eAAG,MAAM,AAAI,OAAC,AAAY;AAC5C,AAAG,AAAC,qBAAC,MAAM,AAAI,QAAI,AAAK,AAAC,OAAC,AAAC;AACzB,AAAE,AAAC,wBAAC,AAAY,aAAC,AAAQ,QAAC,AAAI,AAAC,AAAC,cAAC,AAAC;AAChC,AAAM,+BAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAiB,mBAAE,AAAI,AAAC,AAChD;AAAC,AACH;AAAC,AACH;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAM,UAAI,AAAI,QAAI,CAAC,AAAe,2EAAC,AAAM,AAAC,AAAC,SAAC,AAAC;AACpD,sBAAM,AAAY,eAAG,MAAM,AAAI,OAAC,AAAY;AAC5C,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAQ,QAAC,AAAM,AAAC,AAAC,gBAAC,AAAC;AAClC,AAAM,2BAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAiB,mBAAE,AAAM,AAAC,AAClD;AAAC;AAED,oBAAI,AAAC,IAAG,AAAI,MAAC,AAAO,QAAC,AAAI,OAAC,AAAiB,mBAAE,AAAM,AAAC;AACpD,AAAE,AAAC,oBAAC,OAAM,AAAU,oCAAC,AAAC,AAAC,OAAI,AAAI,AAAC,MAAC,AAAC;AAChC,AAAC,wBAAG,AAAI,MAAC,AAAO,QAAC,AAAI,OAAC,AAAU,YAAE,AAAM,AAAC;AACzC,AAAE,AAAC,wBAAC,OAAM,AAAU,oCAAC,AAAC,AAAC,OAAI,AAAI,AAAC,MAAC,AAAC;AAChC,8BAAM,IAAI,AAAK,AAAC,yCAAmC,AAAM,6BAAuB,AAAI,OAAC,AAAiB,yDAAwC,AAAI,OAAC,AAAU,UAAI,AAAC,AACpK;AAAC,AACH;AAAC;AACD,AAAM,uBAAC,AAAC,AACV;AAAC;AACD,AAAM,mBAAC,AAAI,AACb;;AAAC;AAED,QAAI,AAAgB;AAClB,cAAM,AAAwB,2BAAG,AAAI,KAAC,AAA4B,6BAAC,AAAgB;AACnF,AAAM,eAAC,CAAC,AAAwB,4BAAI,AAAI,OAAG,AAAI,KAAC,AAAM,OAAC,AAAgB,mBAAG,AAAwB,AAAC,6BAAI,AAAK,AAC9G;AAAC,AACF;;6CAED,AAAqB,AACrB,AAAM;;sBAAuB,AAAW;AACtC,AAAM,WAAC,AAAG,IAAC,AAAU,WAAC,AAAG,AAAC,OAAG,AAAG,IAAC,AAAS,UAAC,AAAC,AAAC,KAAG,AAAG,AACrD;AAAC","sourcesContent":["import { computeData } from \"asar-integrity\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { asArray, isEmptyOrSpaces, Lazy, log, use, warn } from \"electron-builder-util\"\nimport { deepAssign } from \"electron-builder-util/out/deepAssign\"\nimport { copyDir, statOrNull, unlinkIfExists } from \"electron-builder-util/out/fs\"\nimport { orIfFileNotExist } from \"electron-builder-util/out/promise\"\nimport { readdir, rename } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { AppInfo } from \"./appInfo\"\nimport { Arch, getArchSuffix, Platform, Target, TargetSpecificOptions } from \"./core\"\nimport { copyFiles, createFileMatcher, FileMatcher, getFileMatchers } from \"./fileMatcher\"\nimport { createTransformer, isElectronCompileUsed } from \"./fileTransformer\"\nimport { AfterPackContext, AsarOptions, Config, FileAssociation, PlatformSpecificBuildOptions } from \"./metadata\"\nimport { Packager } from \"./packager\"\nimport { unpackElectron, unpackMuon } from \"./packager/dirPackager\"\nimport { PackagerOptions } from \"./packagerApi\"\nimport { copyAppFiles } from \"./util/appFileCopier\"\nimport { AppFileCopierHelper, AppFileWalker } from \"./util/AppFileWalker\"\nimport { AsarPackager, checkFileInArchive, ELECTRON_COMPILE_SHIM_FILENAME } from \"./util/asarUtil\"\nimport { AsyncTaskManager } from \"./util/asyncTaskManager\"\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> {\n  readonly packagerOptions: PackagerOptions\n\n  readonly projectDir: string\n  readonly buildResourcesDir: string\n\n  readonly config: Config\n\n  readonly platformSpecificBuildOptions: DC\n\n  get resourceList(): Promise<Array<string>> {\n    return this._resourceList.value\n  }\n\n  private readonly _resourceList = new Lazy<Array<string>>(() => orIfFileNotExist(readdir(this.buildResourcesDir), []))\n\n  abstract get platform(): Platform\n\n  readonly appInfo: AppInfo\n\n  constructor(readonly info: Packager) {\n    this.config = info.config\n    this.platformSpecificBuildOptions = PlatformPackager.normalizePlatformSpecificBuildOptions((<any>this.config)[this.platform.buildConfigurationKey])\n    this.appInfo = this.prepareAppInfo(info.appInfo)\n    this.packagerOptions = info.options\n    this.projectDir = info.projectDir\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n  }\n\n  abstract get defaultTarget(): Array<string>\n\n  protected prepareAppInfo(appInfo: AppInfo) {\n    return appInfo\n  }\n\n  private static normalizePlatformSpecificBuildOptions(options: any | n): any {\n    return options == null ? Object.create(null) : options\n  }\n\n  abstract createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void\n\n  protected getCscPassword(): string {\n    const password = this.doGetCscPassword()\n    if (isEmptyOrSpaces(password)) {\n      log(\"CSC_KEY_PASSWORD is not defined, empty password will be used\")\n      return \"\"\n    }\n    else {\n      return password!.trim()\n    }\n  }\n\n  protected doGetCscPassword(): string | undefined {\n    const cscKeyPassword = this.packagerOptions.cscKeyPassword\n    // allow to specify as empty string\n    return cscKeyPassword == null ? process.env.CSC_KEY_PASSWORD : cscKeyPassword\n  }\n\n  get relativeBuildResourcesDirname() {\n    return use(this.config.directories, it => it!.buildResources) || \"build\"\n  }\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return this.packagerOptions.prepackaged || path.join(outDir, `${this.platform.buildConfigurationKey}${getArchSuffix(arch)}${this.platform === Platform.MAC ? \"\" : \"-unpacked\"}`)\n  }\n\n  dispatchArtifactCreated(file: string, target: Target | null, arch: Arch | null, safeArtifactName?: string) {\n    this.info.dispatchArtifactCreated({\n      file, safeArtifactName, target, arch,\n      packager: this,\n    })\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    const appOutDir = this.computeAppOutDir(outDir, arch)\n    await this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets)\n    this.packageInDistributableFormat(appOutDir, arch, targets, taskManager)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): void {\n    taskManager.addTask(BluebirdPromise.map(targets, it => it.isAsyncSupported ? it.build(appOutDir, arch) : null)\n      .then(() => BluebirdPromise.each(targets, it => it.isAsyncSupported ? null : it.build(appOutDir, arch))))\n  }\n\n  private getExtraFileMatchers(isResources: boolean, appOutDir: string, macroExpander: (pattern: string) => string, customBuildOptions: DC): Array<FileMatcher> | null {\n    const base = isResources ? this.getResourcesDir(appOutDir) : (this.platform === Platform.MAC ? path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\") : appOutDir)\n    return getFileMatchers(this.config, isResources ? \"extraResources\" : \"extraFiles\", this.projectDir, base, true, macroExpander, customBuildOptions)\n  }\n\n  get electronDistMacOsAppName() {\n    return this.config.muonVersion == null ? \"Electron.app\" : \"Brave.app\"\n  }\n\n  get electronDistExecutableName() {\n    return this.config.muonVersion == null ? \"electron\" : \"brave\"\n  }\n\n  get electronDistMacOsExecutableName() {\n    return this.config.muonVersion == null ? \"Electron\" : \"Brave\"\n  }\n\n  protected async doPack(outDir: string, appOutDir: string, platformName: string, arch: Arch, platformSpecificBuildOptions: DC, targets: Array<Target>) {\n    if (this.packagerOptions.prepackaged != null) {\n      return\n    }\n\n    const asarOptions = await this.computeAsarOptions(platformSpecificBuildOptions)\n    const macroExpander = (it: string) => this.expandMacro(it, arch == null ? null : Arch[arch], {\"/*\": \"{,/**/*}\"})\n    const extraResourceMatchers = this.getExtraFileMatchers(true, appOutDir, macroExpander, platformSpecificBuildOptions)\n    const extraFileMatchers = this.getExtraFileMatchers(false, appOutDir, macroExpander, platformSpecificBuildOptions)\n\n    const resourcesPath = this.platform === Platform.MAC ? path.join(appOutDir, this.electronDistMacOsAppName, \"Contents\", \"Resources\") : path.join(appOutDir, \"resources\")\n\n    const muonVersion = this.config.muonVersion\n    const isElectron = muonVersion == null\n    const config = this.config\n    log(`Packaging for ${platformName} ${Arch[arch]} using ${isElectron ? `electron ${config.electronVersion}` : `muon ${muonVersion}`} to ${path.relative(this.projectDir, appOutDir)}`)\n\n    const appDir = this.info.appDir\n    if (this.info.isPrepackedAppAsar) {\n      await unpackElectron(this, appOutDir, platformName, Arch[arch], config.electronVersion!)\n    }\n    else {\n      await (isElectron ? unpackElectron(this, appOutDir, platformName, Arch[arch], config.electronVersion!) : unpackMuon(this, appOutDir, platformName, Arch[arch], muonVersion!))\n    }\n\n    let rawFilter: any = null\n    const excludePatterns: Array<Minimatch> = []\n    if (extraResourceMatchers != null) {\n      for (const matcher of extraResourceMatchers) {\n        matcher.computeParsedPatterns(excludePatterns, this.info.projectDir)\n      }\n    }\n    if (extraFileMatchers != null) {\n      for (const matcher of extraFileMatchers) {\n        matcher.computeParsedPatterns(excludePatterns, this.info.projectDir)\n      }\n    }\n\n    const packContext: AfterPackContext = {\n      appOutDir, outDir, arch, targets,\n      packager: this,\n      electronPlatformName: platformName,\n    }\n\n    const defaultMatcher = createFileMatcher(appDir, resourcesPath, macroExpander, platformSpecificBuildOptions, this, outDir)\n    const isElectronCompile = asarOptions != null && isElectronCompileUsed(this.info)\n    if (isElectronCompile) {\n      defaultMatcher.addPattern(\"!.cache{,/**/*}\")\n    }\n\n    const filter = defaultMatcher.createFilter(rawFilter, excludePatterns.length > 0 ? excludePatterns : null)\n\n    const transformer = await createTransformer(appDir, isElectronCompile ? Object.assign({\n      originalMain: this.info.metadata.main,\n      main: ELECTRON_COMPILE_SHIM_FILENAME,\n    }, config.extraMetadata) : config.extraMetadata)\n    const taskManager = new AsyncTaskManager(this.info.cancellationToken)\n\n    const fileCopierHelper = new AppFileCopierHelper(transformer)\n    const fileWalker = new AppFileWalker(appDir, this.info, filter)\n\n    if (this.info.isPrepackedAppAsar) {\n      taskManager.addTask(copyDir(appDir, path.join(resourcesPath), filter, transformer))\n    }\n    else if (asarOptions == null) {\n      taskManager.addTask(copyAppFiles(fileWalker, fileCopierHelper, path.join(resourcesPath, \"app\")))\n    }\n    else {\n      const unpackPattern = getFileMatchers(config, \"asarUnpack\", appDir, path.join(resourcesPath, \"app\"), false, macroExpander, platformSpecificBuildOptions)\n      const fileMatcher = unpackPattern == null ? null : unpackPattern[0]\n      taskManager.addTask(new AsarPackager(appDir, resourcesPath, asarOptions, fileMatcher == null ? null : fileMatcher.createFilter()).pack(isElectronCompile, this, fileWalker, fileCopierHelper))\n    }\n\n    taskManager.addTask(unlinkIfExists(path.join(resourcesPath, \"default_app.asar\")))\n    taskManager.addTask(unlinkIfExists(path.join(appOutDir, \"version\")))\n    taskManager.addTask(this.postInitApp(packContext))\n    if (this.platform !== Platform.MAC) {\n      taskManager.addTask(rename(path.join(appOutDir, \"LICENSE\"), path.join(appOutDir, \"LICENSE.electron.txt\")).catch(() => {/* ignore */}))\n    }\n\n    await taskManager.awaitTasks()\n\n    if (platformName === \"darwin\" || platformName === \"mas\") {\n      await (<any>require(\"./packager/mac\")).createApp(this, appOutDir, asarOptions == null ? null : await computeData(resourcesPath, asarOptions.externalAllowed ? {externalAllowed: true} : null))\n    }\n\n    await copyFiles(extraResourceMatchers)\n    await copyFiles(extraFileMatchers)\n\n    if (this.info.cancellationToken.cancelled) {\n      return\n    }\n\n    await this.info.afterPack(packContext)\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n    await this.signApp(packContext)\n  }\n\n  protected async postInitApp(packContext: AfterPackContext): Promise<any> {\n  }\n\n  protected signApp(packContext: AfterPackContext): Promise<any> {\n    return BluebirdPromise.resolve()\n  }\n\n  async getIconPath(): Promise<string | null> {\n    return null\n  }\n\n  private async computeAsarOptions(customBuildOptions: DC): Promise<AsarOptions | null> {\n    function errorMessage(name: string) {\n      return `${name} is deprecated is deprecated and not supported — please use asarUnpack`\n    }\n\n    const buildMetadata = <any>this.config\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack\"))\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      throw new Error(errorMessage(\"asar-unpack-dir\"))\n    }\n\n    const platformSpecific = customBuildOptions.asar\n    const result = platformSpecific == null ? this.config.asar : platformSpecific\n    if (result === false) {\n      const appAsarStat = await statOrNull(path.join(this.info.appDir, \"app.asar\"))\n      //noinspection ES6MissingAwait\n      if (appAsarStat == null || !appAsarStat.isFile()) {\n        warn(\"Packaging using asar archive is disabled — it is strongly not recommended.\\n\" +\n          \"Please enable asar and use asarUnpack to unpack files that must be externally available.\")\n      }\n      return null\n    }\n\n    if (result == null || result === true) {\n      return {}\n    }\n\n    for (const name of [\"unpackDir\", \"unpack\"]) {\n      if ((<any>result)[name] != null) {\n        throw new Error(errorMessage(`asar.${name}`))\n      }\n    }\n    return deepAssign({}, result)\n  }\n\n  public getElectronSrcDir(dist: string): string {\n    return path.resolve(this.projectDir, dist)\n  }\n\n  public getElectronDestinationDir(appOutDir: string): string {\n    return appOutDir\n  }\n\n  public getResourcesDir(appOutDir: string): string {\n    return this.platform === Platform.MAC ? this.getMacOsResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n  }\n\n  public getMacOsResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productFilename}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, messagePrefix: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInArchive(path.join(resourcesDir, \"app.asar\"), relativeFile, messagePrefix)\n      return\n    }\n\n    const pathParsed = path.parse(file)\n    // Even when packaging to asar is disabled, it does not imply that the main file can not be inside an .asar archive.\n    // This may occur when the packaging is done manually before processing with electron-builder.\n    if (pathParsed.dir.includes(\".asar\")) {\n      // The path needs to be split to the part with an asar archive which acts like a directory and the part with\n      // the path to main file itself. (e.g. path/arch.asar/dir/index.js -> path/arch.asar, dir/index.js)\n      const pathSplit: Array<string> = pathParsed.dir.split(path.sep)\n      let partWithAsarIndex = 0\n      pathSplit.some((pathPart: string, index: number) => {\n        partWithAsarIndex = index\n        return pathPart.endsWith(\".asar\")\n      })\n      const asarPath = path.join.apply(path, pathSplit.slice(0, partWithAsarIndex + 1))\n      let mainPath = pathSplit.length > (partWithAsarIndex + 1) ? path.join.apply(pathSplit.slice(partWithAsarIndex + 1)) : \"\"\n      mainPath += path.join(mainPath, pathParsed.base)\n      await checkFileInArchive(path.join(resourcesDir, \"app\", asarPath), mainPath, messagePrefix)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`${messagePrefix} \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else {\n        //noinspection ES6MissingAwait\n        if (!outStat.isFile()) {\n          throw new Error(`${messagePrefix} \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n        }\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else {\n      //noinspection ES6MissingAwait\n      if (!outStat.isDirectory()) {\n        throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n      }\n    }\n\n    const resourcesDir = this.getResourcesDir(appOutDir)\n    await this.checkFileInPackage(resourcesDir, this.info.metadata.main || \"index.js\", \"Application entry file\", isAsar)\n    await this.checkFileInPackage(resourcesDir, \"package.json\", \"Application\", isAsar)\n  }\n\n  computeSafeArtifactName(ext: string, arch?: Arch | null, skipArchIfX64 = true) {\n    return this.computeArtifactName(\"${name}-${version}-${arch}.${ext}\", ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  expandArtifactNamePattern(targetSpecificOptions: TargetSpecificOptions | n, ext: string, arch?: Arch | null, defaultPattern?: string, skipArchIfX64 = true): string {\n    let pattern = targetSpecificOptions == null ? null : targetSpecificOptions.artifactName\n    if (pattern == null) {\n      pattern = this.platformSpecificBuildOptions.artifactName || this.config.artifactName || defaultPattern || \"${productName}-${version}-${arch}.${ext}\"\n    }\n    return this.computeArtifactName(pattern, ext, skipArchIfX64 && arch === Arch.x64 ? null : arch)\n  }\n\n  private computeArtifactName(pattern: any, ext: string, arch: Arch | null | undefined) {\n    let archName: string | null = arch == null ? null : Arch[arch]\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\" || ext === \"rpm\") {\n        archName = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        archName = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32) {\n      if (ext === \"deb\" || ext === \"AppImage\") {\n        archName = \"i386\"\n      }\n      else if (ext === \"pacman\" || ext === \"rpm\") {\n        archName = \"i686\"\n      }\n    }\n\n    return this.expandMacro(pattern, this.platform === Platform.MAC ? null : archName, {\n      ext: ext\n    })\n  }\n\n  expandMacro(pattern: string, arch?: string | null, extra: any = {}, isProductNameSanitized = true): string {\n    if (arch == null) {\n      pattern = pattern\n        .replace(\"-${arch}\", \"\")\n        .replace(\" ${arch}\", \"\")\n        .replace(\"_${arch}\", \"\")\n        .replace(\"/${arch}\", \"\")\n    }\n\n    const appInfo = this.appInfo\n    return pattern.replace(/\\${([_a-zA-Z./*]+)}/g, (match, p1): string => {\n      switch (p1) {\n        case \"productName\":\n          return isProductNameSanitized ? appInfo.productFilename : appInfo.productName\n\n        case \"arch\":\n          if (arch == null) {\n            // see above, we remove macro if no arch\n            return \"\"\n          }\n          return arch\n\n        case \"os\":\n          return this.platform.buildConfigurationKey\n\n        case \"channel\":\n          return appInfo.channel || \"latest\"\n\n        default:\n          if (p1 in appInfo) {\n            return (<any>appInfo)[p1]\n          }\n\n          if (p1.startsWith(\"env.\")) {\n            const envName = p1.substring(\"env.\".length)\n            const envValue = process.env[envName]\n            if (envValue == null) {\n              throw new Error(`Env ${envName} is not defined`)\n            }\n            return envValue\n          }\n\n          const value = extra[p1]\n          if (value == null) {\n            throw new Error(`Macro ${p1} is not defined`)\n          }\n          else {\n            return value\n          }\n      }\n    })\n  }\n\n  generateName(ext: string | null, arch: Arch, deployment: boolean, classifier: string | null = null): string {\n    let c: string | null = null\n    let e: string | null = null\n    if (arch === Arch.x64) {\n      if (ext === \"AppImage\") {\n        c = \"x86_64\"\n      }\n      else if (ext === \"deb\") {\n        c = \"amd64\"\n      }\n    }\n    else if (arch === Arch.ia32 && ext === \"deb\") {\n      c = \"i386\"\n    }\n    else if (ext === \"pacman\") {\n      if (arch === Arch.ia32) {\n        c = \"i686\"\n      }\n      e = \"pkg.tar.xz\"\n    }\n    else {\n      c = Arch[arch]\n    }\n\n    if (c == null) {\n      c = classifier\n    }\n    else if (classifier != null) {\n      c += `-${classifier}`\n    }\n    if (e == null) {\n      e = ext\n    }\n    return this.generateName2(e, c, deployment)\n  }\n\n  generateName2(ext: string | null, classifier: string | n, deployment: boolean): string {\n    const dotExt = ext == null ? \"\" : `.${ext}`\n    const separator = ext === \"deb\" ? \"_\" : \"-\"\n    return `${deployment ? this.appInfo.name : this.appInfo.productFilename}${separator}${this.appInfo.version}${classifier == null ? \"\" : `${separator}${classifier}`}${dotExt}`\n  }\n\n  async getDefaultIcon(ext: string) {\n    const resourceList = await this.resourceList\n    const name = `icon.${ext}`\n    if (resourceList.includes(name)) {\n      return path.join(this.buildResourcesDir, name)\n    }\n    else {\n      warn(\"Application icon is not set, default Electron icon will be used\")\n      return null\n    }\n  }\n\n  getTempFile(suffix: string): Promise<string> {\n    return this.info.tempDirManager.getTempFile(suffix)\n  }\n\n  get fileAssociations(): Array<FileAssociation> {\n    return asArray(this.config.fileAssociations).concat(asArray(this.platformSpecificBuildOptions.fileAssociations))\n  }\n\n  async getResource(custom: string | n, ...names: Array<string>): Promise<string | null> {\n    if (custom === undefined) {\n      const resourceList = await this.resourceList\n      for (const name of names) {\n        if (resourceList.includes(name)) {\n          return path.join(this.buildResourcesDir, name)\n        }\n      }\n    }\n    else if (custom != null && !isEmptyOrSpaces(custom)) {\n      const resourceList = await this.resourceList\n      if (resourceList.includes(custom)) {\n        return path.join(this.buildResourcesDir, custom)\n      }\n\n      let p = path.resolve(this.buildResourcesDir, custom)\n      if (await statOrNull(p) == null) {\n        p = path.resolve(this.projectDir, custom)\n        if (await statOrNull(p) == null) {\n          throw new Error(`Cannot find specified resource \"${custom}\", nor relative to \"${this.buildResourcesDir}\", neither relative to project dir (\"${this.projectDir}\")`)\n        }\n      }\n      return p\n    }\n    return null\n  }\n\n  get forceCodeSigning(): boolean {\n    const forceCodeSigningPlatform = this.platformSpecificBuildOptions.forceCodeSigning\n    return (forceCodeSigningPlatform == null ? this.config.forceCodeSigning : forceCodeSigningPlatform) || false\n  }\n}\n\n// remove leading dot\nexport function normalizeExt(ext: string) {\n  return ext.startsWith(\".\") ? ext.substring(1) : ext\n}"]}
