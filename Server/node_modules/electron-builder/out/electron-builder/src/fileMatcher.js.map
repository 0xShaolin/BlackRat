{"version":3,"file":"fileMatcher.js","sourceRoot":"","sources":["../../../src/fileMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { asArray, debug, warn } from \"electron-builder-util\"\nimport { copyDir, copyOrLinkFile, Filter, statOrNull } from \"electron-builder-util/out/fs\"\nimport { mkdirs } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport * as path from \"path\"\nimport { Platform } from \"./core\"\nimport { hasDep } from \"./fileTransformer\"\nimport { Config, FilePattern, PlatformSpecificBuildOptions } from \"./metadata\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { createFilter, hasMagic } from \"./util/filter\"\n\n/** @internal */\nexport class FileMatcher {\n  readonly from: string\n  readonly to: string\n\n  readonly patterns: Array<string>\n\n  constructor(from: string, to: string, private readonly macroExpander: (pattern: string) => string, patterns?: Array<string> | string | n) {\n    this.from = macroExpander(from)\n    this.to = macroExpander(to)\n    this.patterns = asArray(patterns).map(it => this.normalizePattern(it))\n  }\n\n  normalizePattern(pattern: string) {\n    if (pattern.startsWith(\"./\")) {\n      pattern = pattern.substring(\"./\".length)\n    }\n    return path.posix.normalize(this.macroExpander(pattern.replace(/\\\\/g, \"/\")))\n  }\n\n  addPattern(pattern: string) {\n    this.patterns.push(this.normalizePattern(pattern))\n  }\n\n  prependPattern(pattern: string) {\n    this.patterns.unshift(this.normalizePattern(pattern))\n  }\n\n  isEmpty() {\n    return this.patterns.length === 0\n  }\n\n  containsOnlyIgnore(): boolean {\n    return !this.isEmpty() && this.patterns.find(it => !it.startsWith(\"!\")) == null\n  }\n\n  computeParsedPatterns(result: Array<Minimatch>, fromDir?: string): void {\n    // https://github.com/electron-userland/electron-builder/issues/733\n    const minimatchOptions = {dot: true}\n\n    const relativeFrom = fromDir == null ? null : path.relative(fromDir, this.from)\n\n    if (this.patterns.length === 0 && relativeFrom != null) {\n      // file mappings, from here is a file\n      result.push(new Minimatch(relativeFrom, minimatchOptions))\n      return\n    }\n\n    for (let pattern of this.patterns) {\n      if (relativeFrom != null) {\n        pattern = path.join(relativeFrom, pattern)\n      }\n\n      const parsedPattern = new Minimatch(pattern, minimatchOptions)\n      result.push(parsedPattern)\n\n      // do not add if contains dot (possibly file if has extension)\n      if (!pattern.includes(\".\") && !hasMagic(parsedPattern)) {\n        // https://github.com/electron-userland/electron-builder/issues/545\n        // add **/*\n        result.push(new Minimatch(`${pattern}/**/*`, minimatchOptions))\n      }\n    }\n  }\n\n  createFilter(rawFilter?: (file: string) => boolean, excludePatterns?: Array<Minimatch> | n): Filter {\n    const parsedPatterns: Array<Minimatch> = []\n    this.computeParsedPatterns(parsedPatterns)\n    return createFilter(this.from, parsedPatterns, rawFilter, excludePatterns)\n  }\n\n  toString() {\n    return `from: ${this.from}, to: ${this.to}, patterns: ${this.patterns.join(\", \")}`\n  }\n}\n\n/** @internal */\nexport function createFileMatcher(appDir: string, resourcesPath: string, macroExpander: (pattern: string) => string, platformSpecificBuildOptions: PlatformSpecificBuildOptions, packager: PlatformPackager<any>, outDir: string) {\n  const buildResourceDir = path.resolve(packager.info.projectDir, packager.buildResourcesDir)\n\n  const matchers = packager.info.isPrepackedAppAsar ? null : getFileMatchers(packager.info.config, \"files\", appDir, path.join(resourcesPath, \"app\"), false, macroExpander, platformSpecificBuildOptions)\n  const matcher = matchers == null ? new FileMatcher(appDir, path.join(resourcesPath, \"app\"), macroExpander) : matchers[0]\n\n  // https://github.com/electron-userland/electron-builder/issues/1741#issuecomment-311111418 so, do not use inclusive patterns\n\n  const patterns = matcher.patterns\n\n  const customFirstPatterns: Array<string> = []\n  if (matcher.isEmpty() || matcher.containsOnlyIgnore()) {\n    customFirstPatterns.push(\"**/*\")\n  }\n  else {\n    // prependPattern - user pattern should be after to be able to override\n    // do not use **/node_modules/**/* because if pattern starts with **, all not explicitly excluded directories will be traversed (performance + empty dirs will be included into the asar)\n    customFirstPatterns.push(\"node_modules/**/*\")\n    patterns.push(\"package.json\")\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1482\n  const relativeBuildResourceDir = path.relative(matcher.from, buildResourceDir)\n  if (relativeBuildResourceDir.length !== 0 && !relativeBuildResourceDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeBuildResourceDir}{,/**/*}`)\n  }\n\n  const relativeOutDir = matcher.normalizePattern(path.relative(packager.info.projectDir, outDir))\n  if (!relativeOutDir.startsWith(\".\")) {\n    customFirstPatterns.push(`!${relativeOutDir}{,/**/*}`)\n  }\n\n  // add our default exclusions after last user possibly defined \"all\"/permissive pattern\n  let insertIndex = 0\n  for (let i = patterns.length - 1; i >= 0; i--) {\n    if (patterns[i].startsWith(\"**/\")) {\n      insertIndex = i + 1\n      break\n    }\n  }\n  patterns.splice(insertIndex, 0, ...customFirstPatterns)\n\n  if (packager.platform !== Platform.WINDOWS) {\n    // https://github.com/electron-userland/electron-builder/issues/1738\n    patterns.push(\"!**/node_modules/**/*.{dll,exe}\")\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1738#issuecomment-310729208\n  if (hasDep(\"lzma-native\", packager.info)) {\n    patterns.push(\"!**/node_modules/lzma-native/build{,/**/*}\")\n    patterns.push(\"!**/node_modules/lzma-native/deps{,/**/*}\")\n  }\n\n  if (hasDep(\"keytar-prebuild\", packager.info)) {\n    patterns.push(\"!**/node_modules/keytar-prebuild/src{,/**/*}\")\n  }\n  if (hasDep(\"keytar\", packager.info)) {\n    patterns.push(\"!**/node_modules/keytar/src{,/**/*}\")\n  }\n\n  patterns.push(\"!**/node_modules/*/build/Release/obj.target{,/**/*}\")\n  patterns.push(\"!**/node_modules/*/build/Release/.deps{,/**/*}\")\n  patterns.push(\"!**/node_modules/*/build/*.{mk,gypi,Makefile}\")\n  patterns.push(\"!**/node_modules/*/build/{Makefile,gyp-mac-tool}\")\n\n  patterns.push(\"!**/node_modules/*/{CHANGELOG.md,ChangeLog,changelog.md,README.md,karma.conf.js,.coveralls.yml,readme.markdown,binding.gyp,README,readme.md,readme,test,__tests__,tests,powered-test,example,examples,*.d.ts}\")\n  patterns.push(\"!**/node_modules/.bin\")\n  patterns.push(`!**/*.{iml,o,hprof,orig,pyc,pyo,rbc,swp,csproj,sln,xproj}`)\n  patterns.push(\"!**/._*\")\n  patterns.push(\"!**/electron-builder.{yaml,yml,json,json5,toml}\")\n  patterns.push(\"!**/node_modules/@types{,/**/*}\")\n  //noinspection SpellCheckingInspection\n  patterns.push(\"!**/{.git,.hg,.svn,CVS,RCS,SCCS,\" +\n    \"__pycache__,.DS_Store,thumbs.db,.gitignore,.gitkeep,.gitattributes,.npmignore,\" +\n    \".idea,.vs,.editorconfig,.flowconfig,.jshintrc,.eslintrc,\" +\n    \".yarn-integrity,.yarn-metadata.json,yarn-error.log,yarn.lock,package-lock.json,npm-debug.log,\" +\n    \"appveyor.yml,.travis.yml,circle.yml,.nyc_output}\")\n\n  debug(`File patterns of first/default matcher: ${patterns.join(\"\\n\")}`)\n\n  return matcher\n}\n\n/** @internal */\nexport function getFileMatchers(config: Config, name: \"files\" | \"extraFiles\" | \"extraResources\" | \"asarUnpack\", defaultSrc: string, defaultDestination: string, allowAdvancedMatching: boolean, macroExpander: (pattern: string) => string, customBuildOptions: PlatformSpecificBuildOptions): Array<FileMatcher> | null {\n  const globalPatterns: Array<string | FilePattern> | string | n | FilePattern = (<any>config)[name]\n  const platformSpecificPatterns: Array<string | FilePattern> | string | n = (<any>customBuildOptions)[name]\n\n  const defaultMatcher = new FileMatcher(defaultSrc, defaultDestination, macroExpander)\n  const fileMatchers: Array<FileMatcher> = []\n\n  function addPatterns(patterns: Array<string | FilePattern> | string | n | FilePattern) {\n    if (patterns == null) {\n      return\n    }\n    else if (!Array.isArray(patterns)) {\n      if (typeof patterns === \"string\") {\n        defaultMatcher.addPattern(patterns)\n        return\n      }\n      patterns = [patterns]\n    }\n\n    for (const pattern of patterns) {\n      if (typeof pattern === \"string\") {\n        // use normalize to transform ./foo to foo\n        defaultMatcher.addPattern(pattern)\n      }\n      else if (allowAdvancedMatching) {\n        const from = pattern.from == null ? defaultSrc : path.resolve(defaultSrc, pattern.from)\n        const to = pattern.to == null ? defaultDestination : path.resolve(defaultDestination, pattern.to)\n        fileMatchers.push(new FileMatcher(from, to, macroExpander, pattern.filter))\n      }\n      else {\n        throw new Error(`Advanced file copying not supported for \"${name}\"`)\n      }\n    }\n  }\n\n  addPatterns(globalPatterns)\n  addPatterns(platformSpecificPatterns)\n\n  if (!defaultMatcher.isEmpty()) {\n    // default matcher should be first in the array\n    fileMatchers.unshift(defaultMatcher)\n  }\n\n  return fileMatchers.length === 0 ? null : fileMatchers\n}\n\n/** @internal */\nexport function copyFiles(patterns: Array<FileMatcher> | null): Promise<any> {\n  if (patterns == null || patterns.length === 0) {\n    return BluebirdPromise.resolve()\n  }\n\n  return BluebirdPromise.map(patterns, async pattern => {\n    const fromStat = await statOrNull(pattern.from)\n    if (fromStat == null) {\n      warn(`File source ${pattern.from} doesn't exist`)\n      return\n    }\n\n    if (fromStat.isFile()) {\n      const toStat = await statOrNull(pattern.to)\n      // https://github.com/electron-userland/electron-builder/issues/1245\n      if (toStat != null && toStat.isDirectory()) {\n        return await copyOrLinkFile(pattern.from, path.join(pattern.to, path.basename(pattern.from)), fromStat)\n      }\n\n      await mkdirs(path.dirname(pattern.to))\n      return await copyOrLinkFile(pattern.from, pattern.to, fromStat)\n    }\n\n    if (pattern.isEmpty() || pattern.containsOnlyIgnore()) {\n      pattern.prependPattern(\"**/*\")\n    }\n    if (debug.enabled) {\n      debug(`Copying files using pattern: ${pattern}`)\n    }\n    return await copyDir(pattern.from, pattern.to, pattern.createFilter())\n  })\n}"]}