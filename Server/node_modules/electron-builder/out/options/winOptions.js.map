{"version":3,"file":"winOptions.js","sourceRoot":"","sources":["../../src/options/winOptions.ts"],"names":[],"mappings":"","sourcesContent":["import { TargetConfigType, TargetSpecificOptions } from \"../core\"\nimport { PlatformSpecificBuildOptions } from \"../metadata\"\n\nexport interface WinBuildOptions extends PlatformSpecificBuildOptions {\n  /**\n   * Target package type: list of `nsis`, `nsis-web` (Web installer), `portable` (portable app without installation), `appx`, `squirrel`, `7z`, `zip`, `tar.xz`, `tar.lz`, `tar.gz`, `tar.bz2`, `dir`.\n   * AppX package can be built only on Windows 10.\n   *\n   * To use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.\n   *\n   * For `portable` app, `PORTABLE_EXECUTABLE_DIR` env is set (dir where portable executable located).\n   *\n   * @default nsis\n  */\n  readonly target?: TargetConfigType\n\n  /**\n   * Array of signing algorithms used. For AppX `sha256` is always used.\n   * @default ['sha1', 'sha256']\n   */\n  readonly signingHashAlgorithms?: Array<\"sha1\" | \"sha256\"> | null\n\n  /**\n   * The path to application icon.\n   * @default build/icon.ico\n   */\n  readonly icon?: string | null\n\n  /**\n   * The trademarks and registered trademarks.\n   */\n  readonly legalTrademarks?: string | null\n\n  /**\n   * The path to the *.pfx certificate you want to sign with. Please use it only if you cannot use env variable `CSC_LINK` (`WIN_CSC_LINK`) for some reason.\n   * Please see [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\n   */\n  readonly certificateFile?: string | null\n\n  /**\n   * The password to the certificate provided in `certificateFile`. Please use it only if you cannot use env variable `CSC_KEY_PASSWORD` (`WIN_CSC_KEY_PASSWORD`) for some reason.\n   * Please see [Code Signing](https://github.com/electron-userland/electron-builder/wiki/Code-Signing).\n   */\n  readonly certificatePassword?: string | null\n\n  /**\n   * The name of the subject of the signing certificate. Required only for EV Code Signing and works only on Windows.\n   */\n  readonly certificateSubjectName?: string | null\n\n  /**\n   * The SHA1 hash of the signing certificate. The SHA1 hash is commonly specified when multiple certificates satisfy the criteria specified by the remaining switches. Works only on Windows.\n   */\n  readonly certificateSha1?: string | null\n\n  /**\n   * The path to an additional certificate file you want to add to the signature block.\n   */\n  readonly additionalCertificateFile?: string | null\n\n  /**\n   * The URL of the RFC 3161 time stamp server.\n   * @default http://timestamp.comodoca.com/rfc3161\n   */\n  readonly rfc3161TimeStampServer?: string | null\n\n  /**\n   * The URL of the time stamp server.\n   * @default http://timestamp.verisign.com/scripts/timstamp.dll\n   */\n  readonly timeStampServer?: string | null\n\n  /**\n   * [The publisher name](https://github.com/electron-userland/electron-builder/issues/1187#issuecomment-278972073), exactly as in your code signed certificate. Several names can be provided.\n   * Defaults to common name from your code signing certificate.\n   */\n  readonly publisherName?: string | Array<string> | null\n\n  /**\n   * Whether to verify the signature of an available update before installation.\n   * The [publisher name](WinBuildOptions#publisherName) will be used for the signature verification.\n   *\n   * @default true\n   */\n  readonly verifyUpdateCodeSignature?: boolean\n}\n\nexport interface CommonNsisOptions {\n  /**\n   * Whether to create [Unicode installer](http://nsis.sourceforge.net/Docs/Chapter1.html#intro-unicode).\n   * @default true\n   */\n  readonly unicode?: boolean\n\n  /**\n   * See [GUID vs Application Name](https://github.com/electron-userland/electron-builder/wiki/NSIS#guid-vs-application-name).\n   */\n  readonly guid?: string | null\n\n  /**\n   * If `warningsAsErrors` is `true` (default): NSIS will treat warnings as errors. If `warningsAsErrors` is `false`: NSIS will allow warnings.\n   * @default true\n   */\n  readonly warningsAsErrors?: boolean\n\n  /**\n   * @private\n   * @default false\n   */\n  readonly useZip?: boolean\n}\n\n/**\n * NSIS options. See [NSIS target notes](https://github.com/electron-userland/electron-builder/wiki/NSIS).\n */\nexport interface NsisOptions extends CommonNsisOptions, TargetSpecificOptions {\n  /**\n   * One-click installation.\n   * @default true\n   */\n  readonly oneClick?: boolean\n\n  /***\n   * If `oneClick` is `true` (default): Install per all users (per-machine).\n   *\n   * If `oneClick` is `false`: no install mode installer page (choice per-machine or per-user), always install per-machine.\n   * @default false\n   */\n  readonly perMachine?: boolean\n\n  /**\n   * *boring installer only.* Allow requesting for elevation. If false, user will have to restart installer with elevated permissions.\n   * @default true\n   */\n  readonly allowElevation?: boolean\n\n  /**\n   * *boring installer only.* Whether to allow user to change installation directory.\n   * @default false\n   */\n  readonly allowToChangeInstallationDirectory?: boolean\n\n  /**\n   * Whether to create desktop shortcut.\n   * @default true\n   */\n  readonly createDesktopShortcut?: boolean\n\n  /**\n   * *one-click installer only.* Run application after finish.\n   * @default true\n   */\n  readonly runAfterFinish?: boolean\n\n  /**\n   * The path to installer icon, relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * Defaults to `build/installerIcon.ico` or application icon.\n   */\n  readonly installerIcon?: string | null\n\n  /**\n   * The path to uninstaller icon, relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * Defaults to `build/uninstallerIcon.ico` or application icon.\n   */\n  readonly uninstallerIcon?: string | null\n\n  /**\n   * *boring installer only.* `MUI_HEADERIMAGE`, relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * @default build/installerHeader.bmp\n   */\n  readonly installerHeader?: string | null\n\n  /**\n   * *boring installer only.* `MUI_WELCOMEFINISHPAGE_BITMAP`, relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * Defaults to `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`\n   */\n  readonly installerSidebar?: string | null\n\n  /**\n   * *boring installer only.* `MUI_UNWELCOMEFINISHPAGE_BITMAP`, relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * Defaults to `installerSidebar` option or `build/uninstallerSidebar.bmp` or `build/installerSidebar.bmp` or `${NSISDIR}\\\\Contrib\\\\Graphics\\\\Wizard\\\\nsis3-metro.bmp`\n   */\n  readonly uninstallerSidebar?: string | null\n\n  /**\n   * *one-click installer only.* The path to header icon (above the progress bar), relative to the the [build resources](https://github.com/electron-userland/electron-builder/wiki/Options#MetadataDirectories-buildResources) or to the project directory.\n   * Defaults to `build/installerHeaderIcon.ico` or application icon.\n   */\n  readonly installerHeaderIcon?: string | null\n\n  /**\n   * The path to NSIS include script to customize installer. Defaults to `build/installer.nsh`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly include?: string | null\n\n  /**\n   * The path to NSIS script to customize installer. Defaults to `build/installer.nsi`. See [Custom NSIS script](https://github.com/electron-userland/electron-builder/wiki/NSIS#custom-nsis-script).\n   */\n  readonly script?: string | null\n\n  /**\n   * The path to EULA license file. Defaults to `license.rtf` or `license.txt` or `eula.rtf` or `eula.txt` (or uppercase variants, e.g. `EULA.txt` or `LICENSE.TXT`).\n   *\n   * Multiple license files in different languages are supported â€” use lang postfix (e.g. `_de`, `_ru`)). For example, create files `license_de.txt` and `license_en.txt` in the build resources.\n   * If OS language is german, `license_de.txt` will be displayed. See map of [language code to name](https://github.com/meikidd/iso-639-1/blob/master/src/data.js).\n   *\n   * Appropriate license file will be selected by user OS language.\n   */\n  readonly license?: string | null\n\n  /**\n   * [LCID Dec](https://msdn.microsoft.com/en-au/goglobal/bb964664.aspx), defaults to `1033`(`English - United States`).\n   */\n  readonly language?: string | null\n\n  /**\n   * *boring installer only.* Whether to create multi-language installer. Defaults to `unicode` option value.\n   * [Not all strings are translated](https://github.com/electron-userland/electron-builder/issues/646#issuecomment-238155800).\n   */\n  readonly multiLanguageInstaller?: boolean\n\n  /**\n   * Whether to create submenu for start menu shortcut and program files directory. If `true`, company name will be used. Or string value.\n   * @default false\n   */\n  readonly menuCategory?: boolean | string\n\n  /**\n   * The uninstaller display name in the control panel.\n   * @default ${productName} ${version}\n   */\n  readonly uninstallDisplayName?: string\n\n  /**\n   * The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern). Defaults to `${productName} Setup ${version}.${ext}`.\n   */\n  readonly artifactName?: string | null\n\n  /**\n   * *one-click installer only.* Whether to delete app data on uninstall.\n   * @default false\n   */\n  readonly deleteAppDataOnUninstall?: boolean\n\n  /**\n   * Whether to pack the elevate executable (required for electron-updater if per-machine installer used or can be used in the future). Ignored if `perMachine` is set to `true`.\n   * @default true\n   */\n  readonly packElevateHelper?: boolean\n\n  /**\n   * @private\n   * @default false\n   */\n  readonly differentialPackage?: boolean\n}\n\n/**\n * Portable specific options.\n */\nexport interface PortableOptions extends TargetSpecificOptions, CommonNsisOptions {\n  /**\n   * The [requested execution level](http://nsis.sourceforge.net/Reference/RequestExecutionLevel) for Windows.\n   * @default user\n   */\n  readonly requestExecutionLevel?: \"user\" | \"highest\" | \"admin\"\n}\n\n/**\n * Web Installer specific options.\n */\nexport interface NsisWebOptions extends NsisOptions {\n  /**\n   * The application package download URL. Optional â€” by default computed using publish configuration.\n   *\n   * URL like `https://example.com/download/latest` allows web installer to be version independent (installer will download latest application package).\n   *\n   * Custom `X-Arch` http header is set to `32` or `64`.\n   */\n  readonly appPackageUrl?: string | null\n\n  /**\n   * The [artifact file name pattern](https://github.com/electron-userland/electron-builder/wiki/Options#artifact-file-name-pattern). Defaults to `${productName} Web Setup ${version}.${ext}`.\n   */\n  readonly artifactName?: string | null\n}\n\n/**\n * Squirrel.Windows options. Squirrel.Windows target is maintained, but deprecated. Please use `nsis` instead.\n *\n * To use Squirrel.Windows please install `electron-builder-squirrel-windows` dependency.\n * To build for Squirrel.Windows on macOS, please install `mono`: `brew install mono`.\n */\nexport interface SquirrelWindowsOptions extends WinBuildOptions {\n  /**\n   * A URL to an ICO file to use as the application icon (displayed in Control Panel > Programs and Features). Defaults to the Electron icon.\n   *\n   * Please note â€” [local icon file url is not accepted](https://github.com/atom/grunt-electron-installer/issues/73), must be https/http.\n   *\n   * If you don't plan to build windows installer, you can omit it.\n   * If your project repository is public on GitHub, it will be `https://github.com/${u}/${p}/blob/master/build/icon.ico?raw=true` by default.\n   */\n  readonly iconUrl?: string | null\n\n  /**\n   * The path to a .gif file to display during install. `build/install-spinner.gif` will be used if exists (it is a recommended way to set)\n   * (otherwise [default](https://github.com/electron/windows-installer/blob/master/resources/install-spinner.gif)).\n   */\n  readonly loadingGif?: string | null\n\n  /**\n   * Whether to create an MSI installer. Defaults to `false` (MSI is not created).\n   */\n  readonly msi?: boolean\n\n  /**\n   * A URL to your existing updates. Or `true` to automatically set to your GitHub repository. If given, these will be downloaded to create delta updates.\n   */\n  readonly remoteReleases?: string | boolean | null\n\n  /**\n   * Authentication token for remote updates\n   */\n  readonly remoteToken?: string | null\n\n  /**\n   * Use `appId` to identify package instead of `name`.\n   */\n  readonly useAppIdAsId?: boolean\n\n  /**\n   * https://github.com/electron-userland/electron-builder/issues/1743\n   * @private\n   */\n  readonly name?: string\n}\n\n/**\n * AppX options. See [Windows AppX docs](https://msdn.microsoft.com/en-us/library/windows/apps/br211453.aspx).\n */\nexport interface AppXOptions extends TargetSpecificOptions {\n  /**\n   * The background color of the app tile.\n   * @see [Visual Elements](https://msdn.microsoft.com/en-us/library/windows/apps/br211471.aspx).\n   */\n  readonly backgroundColor?: string | null\n\n  /**\n   * @private\n   */\n  readonly makeappxArgs?: Array<string> | null\n\n  /**\n   * Describes the publisher information in a form `CN=your name exactly as in your cert`. The Publisher attribute must match the publisher subject information of the certificate used to sign a package.\n   * By default will be extracted from code sign certificate.\n   */\n  readonly publisher?: string | null\n\n  /**\n   * A friendly name that can be displayed to users. Corresponds to [Properties.DisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211432.aspx).\n   */\n  readonly displayName?: string | null\n\n  /**\n   * A friendly name for the publisher that can be displayed to users. Corresponds to [Properties.PublisherDisplayName](https://msdn.microsoft.com/en-us/library/windows/apps/br211460.aspx).\n   */\n  readonly publisherDisplayName?: string | null\n\n  /**\n   * The name. Corresponds to [Identity.Name](https://msdn.microsoft.com/en-us/library/windows/apps/br211441.aspx).\n   * @default ${name}\n   */\n  readonly identityName?: string | null\n\n  /**\n   * The list of [supported languages](https://docs.microsoft.com/en-us/windows/uwp/globalizing/manage-language-and-region#specify-the-supported-languages-in-the-apps-manifest) that will be listed in the Windows Store.\n   * The first entry (index 0) will be the default language.\n   * Defaults to en-US if omitted.\n   */\n  readonly languages?: Array<string> | string | null\n}\n"]}
