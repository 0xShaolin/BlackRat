import { debug } from "electron-builder-util";
import { copyNodeModules } from "electron-builder-util/out/fs";
import { readlink, stat } from "fs-extra-p";
import * as path from "path";
import { getProductionDependencies } from "./packageDependencies";
const nodeModulesSystemDependentSuffix = `${path.sep}node_modules`;
/** @internal */
export class AsarFileWalker {
    constructor(asarPackager, packager, metadata, filter) {
        this.asarPackager = asarPackager;
        this.packager = packager;
        this.metadata = metadata;
        this.filter = filter;
    }
    consume(file, fileStat, parent, siblingNames) {
        this.metadata.set(file, fileStat);
        // https://github.com/electron-userland/electron-builder/issues/1539
        // but do not filter if we inside node_modules dir
        if (fileStat.isDirectory() && file.endsWith(nodeModulesSystemDependentSuffix) && !parent.includes("node_modules") && siblingNames.includes("package.json")) {
            return this.handleNodeModulesDir(file, parent);
        }
        return this.handleFile(file, fileStat);
    }
    handleNodeModulesDir(nodeModulesDir, parent) {
        return (parent === this.packager.appDir ? this.packager.productionDeps.value : getProductionDependencies(parent))
            .then(it => {
            if (debug.enabled) {
                debug(`Production dependencies in the ${parent}: ${it.filter(it => it.path.startsWith(nodeModulesDir)).map(it => path.relative(nodeModulesDir, it.path)).join(", ")}`);
            }
            return copyNodeModules(it, this.filter, (file, fileStat) => {
                this.metadata.set(file, fileStat);
                return this.handleFile(file, fileStat);
            }, (dep) => {
                this.metadata.set(dep.path, dep.stat);
                return this.handleSymlink(dep.stat, dep.path, dep.link);
            });
        });
    }
    handleFile(file, fileStat) {
        if (!fileStat.isSymbolicLink()) {
            return null;
        }
        return readlink(file)
            .then((linkTarget) => {
            // http://unix.stackexchange.com/questions/105637/is-symlinks-target-relative-to-the-destinations-parent-directory-and-if-so-wh
            return this.handleSymlink(fileStat, file, path.resolve(path.dirname(file), linkTarget));
        });
    }
    handleSymlink(fileStat, file, linkTarget) {
        const link = this.asarPackager.getRelativePath(linkTarget);
        if (link.startsWith("..")) {
            // outside of project, linked module (https://github.com/electron-userland/electron-builder/issues/675)
            return stat(linkTarget)
                .then(targetFileStat => {
                this.metadata.set(file, targetFileStat);
                return targetFileStat;
            });
        }
        else {
            fileStat.relativeLink = link;
        }
        return null;
    }
}
//# sourceMappingURL=AsarFileWalker.js.map