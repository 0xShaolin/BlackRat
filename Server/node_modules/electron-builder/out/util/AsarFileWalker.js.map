{"version":3,"file":"AsarFileWalker.js","sourceRoot":"","sources":["../../src/util/AsarFileWalker.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from \"electron-builder-util\"\nimport { copyNodeModules, FileConsumer, Filter } from \"electron-builder-util/out/fs\"\nimport { readlink, stat, Stats } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Packager } from \"../packager\"\nimport { AsarPackager } from \"./asarUtil\"\nimport { Dependency, getProductionDependencies } from \"./packageDependencies\"\n\nconst nodeModulesSystemDependentSuffix = `${path.sep}node_modules`\n\n/** @internal */\nexport class AsarFileWalker implements FileConsumer {\n  constructor(private readonly asarPackager: AsarPackager, private readonly packager: Packager, private readonly metadata: Map<string, Stats>, private readonly filter: Filter) {\n  }\n\n  consume(file: string, fileStat: Stats, parent: string, siblingNames: Array<string>): any {\n    this.metadata.set(file, fileStat)\n\n    // https://github.com/electron-userland/electron-builder/issues/1539\n    // but do not filter if we inside node_modules dir\n    if (fileStat.isDirectory() && file.endsWith(nodeModulesSystemDependentSuffix) && !parent.includes(\"node_modules\") && siblingNames.includes(\"package.json\")) {\n      return this.handleNodeModulesDir(file, parent)\n    }\n\n    return this.handleFile(file, fileStat)\n  }\n\n  private handleNodeModulesDir(nodeModulesDir: string, parent: string) {\n    return (parent === this.packager.appDir ? this.packager.productionDeps.value : getProductionDependencies(parent))\n      .then(it => {\n        if (debug.enabled) {\n          debug(`Production dependencies in the ${parent}: ${it.filter(it => it.path.startsWith(nodeModulesDir)).map(it => path.relative(nodeModulesDir, it.path)).join(\", \")}`)\n        }\n\n        return copyNodeModules(it, this.filter, (file, fileStat) => {\n          this.metadata.set(file, fileStat)\n          return this.handleFile(file, fileStat)\n        }, (dep: Dependency) => {\n          this.metadata.set(dep.path, dep.stat!)\n          return this.handleSymlink(dep.stat!, dep.path, dep.link!)\n        })\n      })\n  }\n\n  private handleFile(file: string, fileStat: Stats) {\n    if (!fileStat.isSymbolicLink()) {\n      return null\n    }\n\n    return readlink(file)\n      .then((linkTarget): any => {\n        // http://unix.stackexchange.com/questions/105637/is-symlinks-target-relative-to-the-destinations-parent-directory-and-if-so-wh\n        return this.handleSymlink(fileStat, file, path.resolve(path.dirname(file), linkTarget))\n      })\n  }\n\n  private handleSymlink(fileStat: Stats, file: string, linkTarget: string) {\n    const link = this.asarPackager.getRelativePath(linkTarget)\n    if (link.startsWith(\"..\")) {\n      // outside of project, linked module (https://github.com/electron-userland/electron-builder/issues/675)\n      return stat(linkTarget)\n        .then(targetFileStat => {\n          this.metadata.set(file, targetFileStat)\n          return targetFileStat\n        })\n    }\n    else {\n      (<any>fileStat).relativeLink = link\n    }\n    return null\n  }\n}"]}