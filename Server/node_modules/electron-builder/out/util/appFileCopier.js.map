{"version":3,"file":"appFileCopier.js","sourceRoot":"","sources":["../../src/util/appFileCopier.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { CONCURRENCY, FileCopier, Link, MAX_FILE_REQUESTS } from \"electron-builder-util/out/fs\"\nimport { ensureDir, readlink, symlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { Packager } from \"../packager\"\nimport { FileSet } from \"./AppFileCopierHelper\"\nimport { copyFileOrData } from \"./asarUtil\"\nimport { AsyncTaskManager } from \"./asyncTaskManager\"\n\nexport async function copyAppFiles(fileSet: FileSet, packager: Packager) {\n  const metadata = fileSet.metadata\n  const transformedFiles = fileSet.transformedFiles\n  // search auto unpacked dir\n  const unpackedDirs = new Set<string>()\n  const taskManager = new AsyncTaskManager(packager.cancellationToken)\n  const dirToCreateForUnpackedFiles = new Set<string>(unpackedDirs)\n\n  const fileCopier = new FileCopier()\n  const links: Array<Link> = []\n  for (let i = 0, n = fileSet.files.length; i < n; i++) {\n    const file = fileSet.files[i]\n    const stat = metadata.get(file)\n    if (stat == null) {\n      // dir\n      continue\n    }\n\n    const relativePath = file.replace(fileSet.src, fileSet.destination)\n    if (stat.isFile()) {\n      const fileParent = path.dirname(file)\n      // const dirNode = this.fs.getOrCreateNode(this.getRelativePath(fileParent))\n\n      const newData = transformedFiles == null ? null : transformedFiles[i] as string | Buffer\n      if (newData != null) {\n        transformedFiles[i] = null\n      }\n\n      if (!dirToCreateForUnpackedFiles.has(fileParent)) {\n        dirToCreateForUnpackedFiles.add(fileParent)\n        await ensureDir(fileParent.replace(fileSet.src, fileSet.destination))\n      }\n\n      taskManager.addTask(copyFileOrData(fileCopier, newData, file, relativePath, stat))\n      if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n        await taskManager.awaitTasks()\n      }\n    }\n    else if (stat.isSymbolicLink()) {\n      links.push({file: relativePath, link: await readlink(file)})\n    }\n  }\n\n  if (taskManager.tasks.length > MAX_FILE_REQUESTS) {\n    await taskManager.awaitTasks()\n  }\n  if (links.length > 0) {\n    BluebirdPromise.map(links, it => symlink(it.link, it.file), CONCURRENCY)\n  }\n}"]}
