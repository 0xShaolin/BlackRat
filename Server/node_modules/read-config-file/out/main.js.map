{"version":3,"file":"main.js","sourceRoot":"","sources":["../src/main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;oEAIO,AAAK,WAAwB,AAAkB,YAAE,AAAmB,YAAE,AAA+B;AAC1G,cAAM,AAAI,OAAG,MAAM,AAAQ,8CAAC,AAAU,YAAE,AAAM,AAAC;AAC/C,YAAI,AAAM;AACV,AAAE,AAAC,YAAC,AAAU,WAAC,AAAQ,SAAC,AAAQ,AAAC,aAAI,AAAU,WAAC,AAAQ,SAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AAClE,AAAM,qBAAG,AAAO,QAAC,AAAO,AAAC,SAAC,AAAK,MAAC,AAAI,AAAC,AACvC;AAAC,AACD,AAAI,mBAAK,AAAU,WAAC,AAAQ,SAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AACtC,AAAM,qBAAG,AAAO,QAAC,AAAM,AAAC,QAAC,AAAK,MAAC,AAAI,AAAC,AACtC;AAAC,AACD,AAAI,SAHC,AAAE,AAAC,MAGH,AAAC;AACJ,AAAM,qBAAG,AAAQ,0CAAC,AAAI,AAAC,AACzB;AAAC;AAED,AAAE,AAAC,YAAC,AAAG,OAAI,AAAI,QAAI,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACtC,kBAAM,AAAY,eAAG,AAAI,MAAC,AAAQ,SAAC,AAAU,YAAE,AAAU,AAAC;AAC1D,AAAG,AAAC,yBAAS,AAAY,aAAC,AAAU,WAAC,AAAI,AAAC,QAAG,AAAU,aAAG,AAAY,YAAqB,AAAC,AAC9F;AAAC;AACD,AAAM,eAAC,AAAM,AACf;AAAC,AAED,AAAM;;;;;;;;qEAAC,AAAK,WAA+B,AAAW,KAAE,AAAc,QAAE,AAA+B;AACrG,AAAG,AAAC,aAAC,MAAM,AAAU,cAAI,AAAC,IAAG,AAAM,MAAM,AAAE,WAAG,AAAM,MAAO,AAAE,YAAG,AAAM,MAAO,AAAE,YAAG,AAAM,MAAQ,AAAE,aAAG,AAAM,MAAO,AAAC,AAAC,UAAC,AAAC;AACpH,kBAAM,AAAI,OAAG,MAAM,AAAoB,qBAAI,AAAU,WAAC,AAAI,MAAC,AAAI,KAAC,AAAG,KAAE,AAAU,AAAC,aAAE,AAAG,KAAE,AAAG,AAAC,AAAC;AAC5F,AAAE,AAAC,gBAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACjB,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;AAAC;AAED,AAAM,eAAC,AAAI,AACb;AAAC,AAED,AAAM;;;;;;;;;;;;AAnCN,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACrC,AAAO,AAAE,AAAQ,AAAE,AAAM,AAAS;;;;AAClC,AAAO,AAAK,AAAI,AAAM,AAAM,AAE5B,AAAM;;;;8BA+BkC,AAAmB;AACzD,AAAM,WAAC,AAAgB,iBAAC,AAAO,SAAE,AAAI,AAAC,AACxC;AAAC,AAED,AAAM;0BAA8B,AAAmB,SAAE,AAAgB;AACvE,AAAM,mBACH,AAAK,MAAC,AAAC;AACN,AAAE,AAAC,YAAC,AAAC,EAAC,AAAI,SAAK,AAAQ,YAAI,AAAC,EAAC,AAAI,SAAK,AAAS,AAAC,WAAC,AAAC;AAChD,AAAM,mBAAC,AAAa,AACtB;AAAC;AACD,cAAM,AAAC,AACT;AAAC,AAAC,AACN,KAPS,AAAO;AAOf","sourcesContent":["import { readFile } from \"fs-extra-p\"\nimport { safeLoad } from \"js-yaml\"\nimport * as path from \"path\"\n\nexport async function readConfig<T>(configFile: string, projectDir?: string, log?: (message: string) => void): Promise<T> {\n  const data = await readFile(configFile, \"utf8\")\n  let result\n  if (configFile.endsWith(\".json5\") || configFile.endsWith(\".json\")) {\n    result = require(\"json5\").parse(data)\n  }\n  else if (configFile.endsWith(\".toml\")) {\n    result = require(\"toml\").parse(data)\n  }\n  else {\n    result = safeLoad(data)\n  }\n\n  if (log != null && projectDir != null) {\n    const relativePath = path.relative(projectDir, configFile)\n    log(`Using ${relativePath.startsWith(\"..\") ? configFile : relativePath} configuration file`)\n  }\n  return result\n}\n\nexport async function findAndReadConfig<T>(dir: string, prefix: string, log?: (message: string) => void): Promise<T | null> {\n  for (const configFile of [`${prefix}.yml`, `${prefix}.yaml`, `${prefix}.json`, `${prefix}.json5`, `${prefix}.toml`]) {\n    const data = await orNullIfFileNotExist<T>(readConfig(path.join(dir, configFile), dir, log))\n    if (data != null) {\n      return data\n    }\n  }\n\n  return null\n}\n\nexport function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null> {\n  return orIfFileNotExist(promise, null)\n}\n\nexport function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T> {\n  return promise\n    .catch(e => {\n      if (e.code === \"ENOENT\" || e.code === \"ENOTDIR\") {\n        return fallbackValue\n      }\n      throw e\n    })\n}"]}
