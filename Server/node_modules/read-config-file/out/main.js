"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findAndReadConfig = exports.readConfig = undefined;

var _bluebirdLst;

function _load_bluebirdLst() {
    return _bluebirdLst = require("bluebird-lst");
}

let readConfig = exports.readConfig = (() => {
    var _ref = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (configFile, projectDir, log) {
        const data = yield (0, (_fsExtraP || _load_fsExtraP()).readFile)(configFile, "utf8");
        let result;
        if (configFile.endsWith(".json5") || configFile.endsWith(".json")) {
            result = require("json5").parse(data);
        } else if (configFile.endsWith(".toml")) {
            result = require("toml").parse(data);
        } else {
            result = (0, (_jsYaml || _load_jsYaml()).safeLoad)(data);
        }
        if (log != null && projectDir != null) {
            const relativePath = _path.relative(projectDir, configFile);
            log(`Using ${relativePath.startsWith("..") ? configFile : relativePath} configuration file`);
        }
        return result;
    });

    return function readConfig(_x, _x2, _x3) {
        return _ref.apply(this, arguments);
    };
})();

let findAndReadConfig = exports.findAndReadConfig = (() => {
    var _ref2 = (0, (_bluebirdLst || _load_bluebirdLst()).coroutine)(function* (dir, prefix, log) {
        for (const configFile of [`${prefix}.yml`, `${prefix}.yaml`, `${prefix}.json`, `${prefix}.json5`, `${prefix}.toml`]) {
            const data = yield orNullIfFileNotExist(readConfig(_path.join(dir, configFile), dir, log));
            if (data != null) {
                return data;
            }
        }
        return null;
    });

    return function findAndReadConfig(_x4, _x5, _x6) {
        return _ref2.apply(this, arguments);
    };
})();

exports.orNullIfFileNotExist = orNullIfFileNotExist;
exports.orIfFileNotExist = orIfFileNotExist;

var _fsExtraP;

function _load_fsExtraP() {
    return _fsExtraP = require("fs-extra-p");
}

var _jsYaml;

function _load_jsYaml() {
    return _jsYaml = require("js-yaml");
}

var _path = _interopRequireWildcard(require("path"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function orNullIfFileNotExist(promise) {
    return orIfFileNotExist(promise, null);
}
function orIfFileNotExist(promise, fallbackValue) {
    return promise.catch(e => {
        if (e.code === "ENOENT" || e.code === "ENOTDIR") {
            return fallbackValue;
        }
        throw e;
    });
}
//# sourceMappingURL=main.js.map